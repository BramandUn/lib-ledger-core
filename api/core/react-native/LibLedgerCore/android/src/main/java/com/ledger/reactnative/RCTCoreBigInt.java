// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from big_int.djinni

package com.ledger.reactnative;

import BigInt;
import RCTCoreBigInt;
import co.ledger.core.BigInt;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.ArrayList;
import java.util.UUID;;

/** Immutable class representing a potentially very long number */
public class RCTCoreBigInt extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, BigInt> javaObjects;

    public RCTCoreBigInt(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, BigInt>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreBigInt";
    }

    /**
     * Adds two BigInt and returns a new BigInt with the result.
     * @params i Value to be added to this BigInt
     * @return The result of this + i
     */
    @ReactMethod
    public void add(Map<String, String> currentInstance, HashMap <String, String> i, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BigInt currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBigInt instance passed to add method");
            }

            RCTCoreBigInt rctParam_i = (RCTCoreBigInt)self.bridge.moduleForName("RCTCoreBigInt");
            BigInt javaParam_0 = (BigInt)rctParam_i.javaObjects.get(i.get("uid"));
            BigInt javaResult = currentInstanceObj.add(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreBigInt rctImpl_objcResult = (RCTCoreBigInt)self.bridge moduleForName("RCTCoreBigInt");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreBigInt");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBigInt::add : Failed to return BigInt from add method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Subtracts two BigInt and returns a new BigInt with result.
     * @params i Value to be subtracted to this BigInt
     * @return The result of this - i
     */
    @ReactMethod
    public void subtract(Map<String, String> currentInstance, HashMap <String, String> i, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BigInt currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBigInt instance passed to subtract method");
            }

            RCTCoreBigInt rctParam_i = (RCTCoreBigInt)self.bridge.moduleForName("RCTCoreBigInt");
            BigInt javaParam_0 = (BigInt)rctParam_i.javaObjects.get(i.get("uid"));
            BigInt javaResult = currentInstanceObj.subtract(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreBigInt rctImpl_objcResult = (RCTCoreBigInt)self.bridge moduleForName("RCTCoreBigInt");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreBigInt");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBigInt::subtract : Failed to return BigInt from subtract method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Multiplies two BigInt and returns a new BigInt with result.
     * @params i Value to be multiplied by this BigInt
     * @return The result of this * i
     */
    @ReactMethod
    public void multiply(Map<String, String> currentInstance, HashMap <String, String> i, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BigInt currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBigInt instance passed to multiply method");
            }

            RCTCoreBigInt rctParam_i = (RCTCoreBigInt)self.bridge.moduleForName("RCTCoreBigInt");
            BigInt javaParam_0 = (BigInt)rctParam_i.javaObjects.get(i.get("uid"));
            BigInt javaResult = currentInstanceObj.multiply(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreBigInt rctImpl_objcResult = (RCTCoreBigInt)self.bridge moduleForName("RCTCoreBigInt");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreBigInt");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBigInt::multiply : Failed to return BigInt from multiply method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Divides two BigInt and returns a new BigInt with result.
     * @params i Value by which this BigInt will be divided
     * @return The result of this / i
     */
    @ReactMethod
    public void divide(Map<String, String> currentInstance, HashMap <String, String> i, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BigInt currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBigInt instance passed to divide method");
            }

            RCTCoreBigInt rctParam_i = (RCTCoreBigInt)self.bridge.moduleForName("RCTCoreBigInt");
            BigInt javaParam_0 = (BigInt)rctParam_i.javaObjects.get(i.get("uid"));
            BigInt javaResult = currentInstanceObj.divide(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreBigInt rctImpl_objcResult = (RCTCoreBigInt)self.bridge moduleForName("RCTCoreBigInt");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreBigInt");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBigInt::divide : Failed to return BigInt from divide method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Divides two BigInt and returns a new BigInt with result of the division and the remainder.
     * @params i Value by which this BigInteger is to be divided, and the remainder computed
     * @return A tuple of [this / i, this % i]
     */
    @ReactMethod
    public void divideAndRemainder(Map<String, String> currentInstance, HashMap <String, String> i, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BigInt currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBigInt instance passed to divideAndRemainder method");
            }

            RCTCoreBigInt rctParam_i = (RCTCoreBigInt)self.bridge.moduleForName("RCTCoreBigInt");
            BigInt javaParam_0 = (BigInt)rctParam_i.javaObjects.get(i.get("uid"));
            ArrayList<BigInt> javaResult = currentInstanceObj.divideAndRemainder(javaParam_0);

            ArrayList<HashMap <String, String>> result = new ArrayList<HashMap <String, String>>();
            for (HashMap <String, String> objcResult_elem : objcResult)
            {
                String uuid = UUID.randomUUID().toString();
                RCTCoreBigInt rctImpl_objcResult_elem = (RCTCoreBigInt)self.bridge moduleForName("RCTCoreBigInt");
                rctImpl_objcResult_elem.javaObjects.put(uuid, objcResult_elem);
                Map<String, String> result_elem = new HashMap<String, String>();
                result_elem.put("type","RCTCoreBigInt");
                result_elem.put("uid",uuid);
                result.add(result_elem);
            }

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBigInt::divideAndRemainder : Failed to return ArrayList<BigInt> from divideAndRemainder method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Raises this BigInt with an interger value.
     * @params i The exponent to which thi BigInt is raised
     * @return The result of this ^ exponent
     */
    @ReactMethod
    public void pow(Map<String, String> currentInstance, int exponent, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BigInt currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBigInt instance passed to pow method");
            }

            BigInt javaResult = currentInstanceObj.pow(exponent);

            String uuid = UUID.randomUUID().toString();
            RCTCoreBigInt rctImpl_objcResult = (RCTCoreBigInt)self.bridge moduleForName("RCTCoreBigInt");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreBigInt");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBigInt::pow : Failed to return BigInt from pow method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Formats this BigInt to a decimal string (e.g. BigInt("12345").toDecimalString(1, ".", ",") => "1,234.5")
     * @params precision The power of ten by wich this BigInt is divided
     * @params decimalSeparator The separator to use between the integer part and the decimal part
     * @params thousandSeparator The separator to use between each group of thousand units
     * @return The BigInt formatted as a decimal string
     */
    @ReactMethod
    public void toDecimalString(Map<String, String> currentInstance, int precision, String decimalSeparator, String thousandSeparator, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BigInt currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBigInt instance passed to toDecimalString method");
            }

            String javaResult = currentInstanceObj.toDecimalString(precision, decimalSeparator, thousandSeparator);
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBigInt::toDecimalString : Failed to return String from toDecimalString method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Formats this BigInt to the interger representation of its internal value.
     * @params radix The radix of the number representation in which to format (right now 10 or 16)
     */
    @ReactMethod
    public void toString(Map<String, String> currentInstance, int radix, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BigInt currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBigInt instance passed to toString method");
            }

            String javaResult = currentInstanceObj.toString(radix);
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBigInt::toString : Failed to return String from toString method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Returns the int representation of this BigInt. Note that if the BigInt is greater than 4 bytes the returned value
     * will be meaningless.
     * @return The int representation of this BigInt
     */
    @ReactMethod
    public void intValue(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BigInt currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBigInt instance passed to intValue method");
            }

            int javaResult = currentInstanceObj.intValue();
            Map<String, int> result = new HashMap<String, int>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBigInt::intValue : Failed to return int from intValue method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Compares two BigInt together.
     * @param i The value to compare with this BigInt
     * @return a positive value if this > i. A negative value if this < i. 0 if the two BigInts are equal
     */
    @ReactMethod
    public void compare(Map<String, String> currentInstance, HashMap <String, String> i, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BigInt currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBigInt instance passed to compare method");
            }

            RCTCoreBigInt rctParam_i = (RCTCoreBigInt)self.bridge.moduleForName("RCTCoreBigInt");
            BigInt javaParam_0 = (BigInt)rctParam_i.javaObjects.get(i.get("uid"));
            int javaResult = currentInstanceObj.compare(javaParam_0);
            Map<String, int> result = new HashMap<String, int>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBigInt::compare : Failed to return int from compare method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Creates a BigInt with a decimal string (e.g. "1.2000"). Note that every non numeric characters (except the decimal separator)
     * are ignored (e.g. "1ledger000" will be equal to "1000")
     * @param s The string with the decimal representation of the BigInt
     * @param precision The power of ten by which your decimal number must be multiplied in order to get his integer representation
     * @params decimalSeparator The decimal separator used by this string representation
     * @return The created BigInt
     */
    @ReactMethod
    public void fromDecimalString(Map<String, String> currentInstance, String s, int precision, String decimalSeparator, Promise promise) {
        try
        {
            BigInt javaResult = BigInt.fromDecimalString(s, precision, decimalSeparator);

            String uuid = UUID.randomUUID().toString();
            RCTCoreBigInt rctImpl_objcResult = (RCTCoreBigInt)self.bridge moduleForName("RCTCoreBigInt");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreBigInt");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBigInt::fromDecimalString : Failed to return BigInt from fromDecimalString method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Creates a BigInt with an integer string expressed in hexadecimal or decimal radix.
     * @param s The string to parse
     * @param radix The radix of the number representation (right now 10 or 16)
     * @return The created BigInt
     */
    @ReactMethod
    public void fromIntegerString(Map<String, String> currentInstance, String s, int radix, Promise promise) {
        try
        {
            BigInt javaResult = BigInt.fromIntegerString(s, radix);

            String uuid = UUID.randomUUID().toString();
            RCTCoreBigInt rctImpl_objcResult = (RCTCoreBigInt)self.bridge moduleForName("RCTCoreBigInt");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreBigInt");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBigInt::fromIntegerString : Failed to return BigInt from fromIntegerString method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Creates a BigInt from a int64 value
     * @param l The value to convert
     * @return The created BigInt
     */
    @ReactMethod
    public void fromLong(Map<String, String> currentInstance, long l, Promise promise) {
        try
        {
            BigInt javaResult = BigInt.fromLong(l);

            String uuid = UUID.randomUUID().toString();
            RCTCoreBigInt rctImpl_objcResult = (RCTCoreBigInt)self.bridge moduleForName("RCTCoreBigInt");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreBigInt");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBigInt::fromLong : Failed to return BigInt from fromLong method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
