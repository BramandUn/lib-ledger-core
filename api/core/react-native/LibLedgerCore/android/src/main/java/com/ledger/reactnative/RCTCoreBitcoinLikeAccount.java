// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

package com.ledger.reactnative;

import BitcoinLikeAccount;
import RCTCoreBitcoinLikeOutputListCallback;
import RCTCoreBitcoinLikeTransaction;
import RCTCoreBitcoinLikeTransactionBuilder;
import RCTCoreI32Callback;
import RCTCoreStringCallback;
import co.ledger.core.BitcoinLikeOutputListCallback;
import co.ledger.core.BitcoinLikeTransaction;
import co.ledger.core.BitcoinLikeTransactionBuilder;
import co.ledger.core.I32Callback;
import co.ledger.core.StringCallback;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.UUID;;

/**Class representing a Bitcoin account */
public class RCTCoreBitcoinLikeAccount extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, BitcoinLikeAccount> javaObjects;

    public RNLedgerCoreModule(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, BitcoinLikeAccount>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreBitcoinLikeAccount";
    }

    /**
     *Get UTXOs of account in a given range
     *@param from, integer, lower bound for account's UTXO's index
     *@param to, integer, upper bound for account's UTXO's index
     *@param callback, ListCallback object which returns a list of BitcoinLikeOutput if getUTXO succeed
     */
    @ReactMethod
    public void getUTXO(Map<String, String> currentInstance, int from, int to, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeAccount currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeAccount instance passed to getUTXO method");
            }

            RCTCoreBitcoinLikeOutputListCallback javaParam_2 = rctParamType.initWithPromise(promise, self.bridge);
            currentInstanceObj.getUTXO(from, to, javaParam_2);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get UTXOs count of account
     *@param callback, Callback object which returns number of UTXO owned by this account
     */
    @ReactMethod
    public void getUTXOCount(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeAccount currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeAccount instance passed to getUTXOCount method");
            }

            RCTCoreI32Callback javaParam_0 = rctParamType.initWithPromise(promise, self.bridge);
            currentInstanceObj.getUTXOCount(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void broadcastRawTransaction(Map<String, String> currentInstance, byte[] transaction, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeAccount currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeAccount instance passed to broadcastRawTransaction method");
            }

            RCTCoreStringCallback javaParam_1 = rctParamType.initWithPromise(promise, self.bridge);
            currentInstanceObj.broadcastRawTransaction(transaction, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void broadcastTransaction(Map<String, String> currentInstance, HashMap <String, String> transaction, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeAccount currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeAccount instance passed to broadcastTransaction method");
            }

            RCTCoreBitcoinLikeTransaction rctParam_transaction = (RCTCoreBitcoinLikeTransaction)self.bridge.moduleForName("RCTCoreBitcoinLikeTransaction");
            BitcoinLikeTransaction javaParam_0 = (BitcoinLikeTransaction)rctParam_transaction.javaObjects.get(transaction.get("uid"));
            RCTCoreStringCallback javaParam_1 = rctParamType.initWithPromise(promise, self.bridge);
            currentInstanceObj.broadcastTransaction(javaParam_0, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void buildTransaction(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeAccount currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeAccount instance passed to buildTransaction method");
            }

            BitcoinLikeTransactionBuilder javaResult = currentInstanceObj.buildTransaction();

            String uuid = UUID.randomUUID().toString();
            RCTCoreBitcoinLikeTransactionBuilder rctImpl_objcResult = (RCTCoreBitcoinLikeTransactionBuilder)self.bridge moduleForName("RCTCoreBitcoinLikeTransactionBuilder");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreBitcoinLikeTransactionBuilder");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeAccount::buildTransaction : Failed to return BitcoinLikeTransactionBuilder from buildTransaction method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
