// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

package com.ledger.reactnative;

import co.ledger.core.BitcoinLikeBlock;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

/**Class representing Bitcoin block */
public class RCTCoreBitcoinLikeBlock extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, BitcoinLikeBlock> javaObjects;
    public Map<String, BitcoinLikeBlock> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreBitcoinLikeBlock(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, BitcoinLikeBlock>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreBitcoinLikeBlock";
    }

    /**
     *Hash of block
     *@return string representing hash of this block
     */
    @ReactMethod
    public void getHash(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeBlock currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeBlock instance passed to getHash method");
            }

            String javaResult = currentInstanceObj.getHash();
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeBlock::getHash : Failed to return String from getHash method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Height of block in blockchain
     *@return 64 bits integer, height of block
     */
    @ReactMethod
    public void getHeight(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeBlock currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeBlock instance passed to getHeight method");
            }

            long javaResult = currentInstanceObj.getHeight();
            Map<String, long> result = new HashMap<String, long>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeBlock::getHeight : Failed to return long from getHeight method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Timestamp when block was mined
     *@return Date object, date when block was appended to blockchain
     */
    @ReactMethod
    public void getTime(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeBlock currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeBlock instance passed to getTime method");
            }

            Date javaResult = currentInstanceObj.getTime();
            Map<String, Date> result = new HashMap<String, Date>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeBlock::getTime : Failed to return Date from getTime method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
