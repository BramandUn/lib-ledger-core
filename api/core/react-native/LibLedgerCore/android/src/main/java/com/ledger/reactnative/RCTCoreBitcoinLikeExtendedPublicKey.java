// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from addresses.djinni

package com.ledger.reactnative;

import BitcoinLikeExtendedPublicKey;
import RCTCoreBitcoinLikeAddress;
import co.ledger.core.BitcoinLikeAddress;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.UUID;;

public class RCTCoreBitcoinLikeExtendedPublicKey extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, BitcoinLikeExtendedPublicKey> javaObjects;

    public RCTCoreBitcoinLikeExtendedPublicKey(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, BitcoinLikeExtendedPublicKey>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreBitcoinLikeExtendedPublicKey";
    }

    @ReactMethod
    public void derive(Map<String, String> currentInstance, String path, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeExtendedPublicKey currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeExtendedPublicKey instance passed to derive method");
            }

            BitcoinLikeAddress javaResult = currentInstanceObj.derive(path);

            String uuid = UUID.randomUUID().toString();
            RCTCoreBitcoinLikeAddress rctImpl_objcResult = (RCTCoreBitcoinLikeAddress)self.bridge moduleForName("RCTCoreBitcoinLikeAddress");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreBitcoinLikeAddress");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeExtendedPublicKey::derive : Failed to return BitcoinLikeAddress from derive method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void derivePublicKey(Map<String, String> currentInstance, String path, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeExtendedPublicKey currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeExtendedPublicKey instance passed to derivePublicKey method");
            }

            byte[] javaResult = currentInstanceObj.derivePublicKey(path);
            Map<String, byte[]> result = new HashMap<String, byte[]>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeExtendedPublicKey::derivePublicKey : Failed to return byte[] from derivePublicKey method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void deriveHash160(Map<String, String> currentInstance, String path, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeExtendedPublicKey currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeExtendedPublicKey instance passed to deriveHash160 method");
            }

            byte[] javaResult = currentInstanceObj.deriveHash160(path);
            Map<String, byte[]> result = new HashMap<String, byte[]>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeExtendedPublicKey::deriveHash160 : Failed to return byte[] from deriveHash160 method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void toBase58(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeExtendedPublicKey currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeExtendedPublicKey instance passed to toBase58 method");
            }

            String javaResult = currentInstanceObj.toBase58();
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeExtendedPublicKey::toBase58 : Failed to return String from toBase58 method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void getRootPath(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeExtendedPublicKey currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeExtendedPublicKey instance passed to getRootPath method");
            }

            String javaResult = currentInstanceObj.getRootPath();
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeExtendedPublicKey::getRootPath : Failed to return String from getRootPath method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
