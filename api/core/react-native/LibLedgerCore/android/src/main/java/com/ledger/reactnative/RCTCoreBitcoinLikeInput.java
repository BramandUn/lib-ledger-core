// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

package com.ledger.reactnative;

import BitcoinLikeInput;
import RCTCoreAmount;
import RCTCoreBinaryCallback;
import RCTCoreBitcoinLikeOutput;
import RCTCoreBitcoinLikeScript;
import RCTCoreDerivationPath;
import co.ledger.core.Amount;
import co.ledger.core.BinaryCallback;
import co.ledger.core.BitcoinLikeOutput;
import co.ledger.core.BitcoinLikeScript;
import co.ledger.core.DerivationPath;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.ArrayList;
import java.util.UUID;;

/**Class representing Bitcoin inputs */
public class RCTCoreBitcoinLikeInput extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, BitcoinLikeInput> javaObjects;

    public RCTCoreBitcoinLikeInput(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, BitcoinLikeInput>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreBitcoinLikeInput";
    }

    /** Returns the address of the input (if an address can be computed) */
    @ReactMethod
    public void getAddress(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeInput currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeInput instance passed to getAddress method");
            }

            String javaResult = currentInstanceObj.getAddress();
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeInput::getAddress : Failed to return String from getAddress method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Returns the public associated with the address. This value can be NULL if you are building a transaction with an
     * address which does not belong to your wallet.
     */
    @ReactMethod
    public void getPublicKeys(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeInput currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeInput instance passed to getPublicKeys method");
            }

            ArrayList<byte[]> javaResult = currentInstanceObj.getPublicKeys();
            Map<String, ArrayList<byte[]>> result = new HashMap<String, ArrayList<byte[]>>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeInput::getPublicKeys : Failed to return ArrayList<byte[]> from getPublicKeys method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /** Returns the derivation path of this input if the address is owned by the wallet */
    @ReactMethod
    public void getDerivationPath(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeInput currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeInput instance passed to getDerivationPath method");
            }

            ArrayList<DerivationPath> javaResult = currentInstanceObj.getDerivationPath();

            ArrayList<HashMap <String, String>> result = new ArrayList<HashMap <String, String>>();
            for (HashMap <String, String> objcResult_elem : objcResult)
            {
                String uuid = UUID.randomUUID().toString();
                RCTCoreDerivationPath rctImpl_objcResult_elem = (RCTCoreDerivationPath)self.bridge moduleForName("RCTCoreDerivationPath");
                rctImpl_objcResult_elem.javaObjects.put(uuid, objcResult_elem);
                Map<String, String> result_elem = new HashMap<String, String>();
                result_elem.put("type","RCTCoreDerivationPath");
                result_elem.put("uid",uuid);
                result.add(result_elem);
            }

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeInput::getDerivationPath : Failed to return ArrayList<DerivationPath> from getDerivationPath method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Returns the value of the amount. Depending on the backend this value may not exist if the input is not owned by
     * the wallet.
     */
    @ReactMethod
    public void getValue(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeInput currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeInput instance passed to getValue method");
            }

            Amount javaResult = currentInstanceObj.getValue();

            String uuid = UUID.randomUUID().toString();
            RCTCoreAmount rctImpl_objcResult = (RCTCoreAmount)self.bridge moduleForName("RCTCoreAmount");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreAmount");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeInput::getValue : Failed to return Amount from getValue method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Get the transaction hash of the output spent by this input. The result can be NULL if the output is not owned by
     * the wallet
     */
    @ReactMethod
    public void getPreviousTxHash(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeInput currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeInput instance passed to getPreviousTxHash method");
            }

            String javaResult = currentInstanceObj.getPreviousTxHash();
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeInput::getPreviousTxHash : Failed to return String from getPreviousTxHash method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Get the index at which the output is located in the transaction output spent by this input. The result can be
     * NULL if the input does not belong to the wallet
     *Check whether input
     *@return Boolean, true if input belongs to coinbase transaction (reward for mining a block)
     */
    @ReactMethod
    public void isCoinbase(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeInput currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeInput instance passed to isCoinbase method");
            }

            boolean javaResult = currentInstanceObj.isCoinbase();
            Map<String, boolean> result = new HashMap<String, boolean>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeInput::isCoinbase : Failed to return boolean from isCoinbase method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Stored data cointained in coinbase
     *@return Optional String
     */
    @ReactMethod
    public void getCoinbase(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeInput currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeInput instance passed to getCoinbase method");
            }

            String javaResult = currentInstanceObj.getCoinbase();
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeInput::getCoinbase : Failed to return String from getCoinbase method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get output index, it identifies which UTXO from tht transaction to spend
     *@return Optional 32 bits integer, index of previous transaction
     */
    @ReactMethod
    public void getPreviousOutputIndex(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeInput currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeInput instance passed to getPreviousOutputIndex method");
            }

            Integer javaResult = currentInstanceObj.getPreviousOutputIndex();
            Map<String, Integer> result = new HashMap<String, Integer>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeInput::getPreviousOutputIndex : Failed to return Integer from getPreviousOutputIndex method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Retrieve the output spent by this input. Depending on the implementation this method may
     * use a lock to fetch data from a database. Therefore it may have poor performance, use with
     * caution.
     * @return The output spent by this input.
     */
    @ReactMethod
    public void getPreviousOuput(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeInput currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeInput instance passed to getPreviousOuput method");
            }

            BitcoinLikeOutput javaResult = currentInstanceObj.getPreviousOuput();

            String uuid = UUID.randomUUID().toString();
            RCTCoreBitcoinLikeOutput rctImpl_objcResult = (RCTCoreBitcoinLikeOutput)self.bridge moduleForName("RCTCoreBitcoinLikeOutput");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreBitcoinLikeOutput");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeInput::getPreviousOuput : Failed to return BitcoinLikeOutput from getPreviousOuput method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /** Get ScriptSig of this input. The scriptsig is the first half of a script necessary to spend a previous output. */
    @ReactMethod
    public void getScriptSig(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeInput currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeInput instance passed to getScriptSig method");
            }

            byte[] javaResult = currentInstanceObj.getScriptSig();
            Map<String, byte[]> result = new HashMap<String, byte[]>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeInput::getScriptSig : Failed to return byte[] from getScriptSig method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /** Parse the script sig to a [[BitcoinLikeScript]] */
    @ReactMethod
    public void parseScriptSig(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeInput currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeInput instance passed to parseScriptSig method");
            }

            BitcoinLikeScript javaResult = currentInstanceObj.parseScriptSig();

            String uuid = UUID.randomUUID().toString();
            RCTCoreBitcoinLikeScript rctImpl_objcResult = (RCTCoreBitcoinLikeScript)self.bridge moduleForName("RCTCoreBitcoinLikeScript");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreBitcoinLikeScript");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeInput::parseScriptSig : Failed to return BitcoinLikeScript from parseScriptSig method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Set the ScriptS to the given value
     * @param scriptSig The ScriptSig to use for this input
     */
    @ReactMethod
    public void setScriptSig(Map<String, String> currentInstance, byte[] scriptSig, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeInput currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeInput instance passed to setScriptSig method");
            }

            currentInstanceObj.setScriptSig(scriptSig);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /** Push data to the end of the current ScriptSig */
    @ReactMethod
    public void pushToScriptSig(Map<String, String> currentInstance, byte[] data, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeInput currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeInput instance passed to pushToScriptSig method");
            }

            currentInstanceObj.pushToScriptSig(data);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /** Set the sequence number of this input */
    @ReactMethod
    public void setSequence(Map<String, String> currentInstance, int sequence, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeInput currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeInput instance passed to setSequence method");
            }

            currentInstanceObj.setSequence(sequence);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /** Get the sequence number of this input */
    @ReactMethod
    public void getSequence(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeInput currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeInput instance passed to getSequence method");
            }

            long javaResult = currentInstanceObj.getSequence();
            Map<String, long> result = new HashMap<String, long>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeInput::getSequence : Failed to return long from getSequence method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void getPreviousTransaction(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeInput currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeInput instance passed to getPreviousTransaction method");
            }

            RCTCoreBinaryCallback javaParam_0 = rctParamType.initWithPromise(promise, self.bridge);
            currentInstanceObj.getPreviousTransaction(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /** Easy way to set the P2PKH script signature. Shorthand for input.pushToScriptSig(input.getPublicKeys()[0], signature) */
    @ReactMethod
    public void setP2PKHSigScript(Map<String, String> currentInstance, byte[] signature, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeInput currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeInput instance passed to setP2PKHSigScript method");
            }

            currentInstanceObj.setP2PKHSigScript(signature);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
