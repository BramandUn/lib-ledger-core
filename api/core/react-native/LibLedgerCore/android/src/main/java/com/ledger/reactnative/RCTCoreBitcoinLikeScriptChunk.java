// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_script.djinni

package com.ledger.reactnative;

import BitcoinLikeScriptChunk;
import RCTCoreBitcoinLikeOperator;
import RCTCoreBitcoinLikeScriptChunk;
import co.ledger.core.BitcoinLikeOperator;
import co.ledger.core.BitcoinLikeScriptChunk;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.UUID;;

public class RCTCoreBitcoinLikeScriptChunk extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, BitcoinLikeScriptChunk> javaObjects;

    public RNLedgerCoreModule(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, BitcoinLikeScriptChunk>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreBitcoinLikeScriptChunk";
    }

    @ReactMethod
    public void isOperator(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeScriptChunk currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeScriptChunk instance passed to isOperator method");
            }

            boolean javaResult = currentInstanceObj.isOperator();
            Map<String, boolean> result = new HashMap<String, boolean>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeScriptChunk::isOperator : Failed to return boolean from isOperator method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void isPushedData(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeScriptChunk currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeScriptChunk instance passed to isPushedData method");
            }

            boolean javaResult = currentInstanceObj.isPushedData();
            Map<String, boolean> result = new HashMap<String, boolean>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeScriptChunk::isPushedData : Failed to return boolean from isPushedData method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void getOperator(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeScriptChunk currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeScriptChunk instance passed to getOperator method");
            }

            BitcoinLikeOperator javaResult = currentInstanceObj.getOperator();

            String uuid = UUID.randomUUID().toString();
            RCTCoreBitcoinLikeOperator rctImpl_objcResult = (RCTCoreBitcoinLikeOperator)self.bridge moduleForName("RCTCoreBitcoinLikeOperator");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreBitcoinLikeOperator");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeScriptChunk::getOperator : Failed to return BitcoinLikeOperator from getOperator method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void getPushedData(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeScriptChunk currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeScriptChunk instance passed to getPushedData method");
            }

            byte[] javaResult = currentInstanceObj.getPushedData();
            Map<String, byte[]> result = new HashMap<String, byte[]>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeScriptChunk::getPushedData : Failed to return byte[] from getPushedData method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void next(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeScriptChunk currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeScriptChunk instance passed to next method");
            }

            BitcoinLikeScriptChunk javaResult = currentInstanceObj.next();

            String uuid = UUID.randomUUID().toString();
            RCTCoreBitcoinLikeScriptChunk rctImpl_objcResult = (RCTCoreBitcoinLikeScriptChunk)self.bridge moduleForName("RCTCoreBitcoinLikeScriptChunk");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreBitcoinLikeScriptChunk");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeScriptChunk::next : Failed to return BitcoinLikeScriptChunk from next method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void hasNext(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            BitcoinLikeScriptChunk currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreBitcoinLikeScriptChunk instance passed to hasNext method");
            }

            boolean javaResult = currentInstanceObj.hasNext();
            Map<String, boolean> result = new HashMap<String, boolean>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreBitcoinLikeScriptChunk::hasNext : Failed to return boolean from hasNext method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
