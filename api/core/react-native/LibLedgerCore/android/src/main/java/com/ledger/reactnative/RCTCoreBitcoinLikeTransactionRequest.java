// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

package com.ledger.reactnative;

import BitcoinLikeTransactionRequest;
import RCTCoreAmount;
import RCTCoreBitcoinLikeOutput;
import co.ledger.core.Amount;
import co.ledger.core.BitcoinLikeOutput;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.ArrayList;
import java.util.UUID;;

/**Structure representing a bitcoin transaction request */
public class RCTCoreBitcoinLikeTransactionRequest extends ReactContextBaseJavaModule {
    private final ReactApplicationContext reactContext;
    private Map<String, BitcoinLikeTransactionRequest> javaObjects;

    public RCTCoreBitcoinLikeTransactionRequest(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, BitcoinLikeTransactionRequest>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreBitcoinLikeTransactionRequest";
    }
    public static void init(ArrayList <HashMap <String, String>> * utxo, ArrayList <HashMap <String, String>> * outputs, Option<HashMap <String, String>> baseFees, Option<HashMap <String, String>> totalFees, Integer lockTime, Promise promise) {
        ArrayList<HashMap <String, String>> javaParam_0 = new ArrayList<HashMap <String, String>>();
        for (HashMap <String, String> utxo_elem : utxo)
        {
            RCTCoreBitcoinLikeOutput rctParam_utxo_elem = (RCTCoreBitcoinLikeOutput)self.bridge.moduleForName("RCTCoreBitcoinLikeOutput");
            BitcoinLikeOutput javaParam_0_elem = (BitcoinLikeOutput)rctParam_utxo_elem.javaObjects.get(utxo_elem.get("uid"));
            javaParam_0.add(javaParam_0_elem);
        }
        ArrayList<HashMap <String, String>> javaParam_1 = new ArrayList<HashMap <String, String>>();
        for (HashMap <String, String> outputs_elem : outputs)
        {
            RCTCoreBitcoinLikeOutput rctParam_outputs_elem = (RCTCoreBitcoinLikeOutput)self.bridge.moduleForName("RCTCoreBitcoinLikeOutput");
            BitcoinLikeOutput javaParam_1_elem = (BitcoinLikeOutput)rctParam_outputs_elem.javaObjects.get(outputs_elem.get("uid"));
            javaParam_1.add(javaParam_1_elem);
        }
        RCTCoreAmount rctParam_baseFees = (RCTCoreAmount)self.bridge.moduleForName("RCTCoreAmount");
        Amount javaParam_2 = (Amount)rctParam_baseFees.javaObjects.get(baseFees.get("uid"));
        RCTCoreAmount rctParam_totalFees = (RCTCoreAmount)self.bridge.moduleForName("RCTCoreAmount");
        Amount javaParam_3 = (Amount)rctParam_totalFees.javaObjects.get(totalFees.get("uid"));
        BitcoinLikeTransactionRequest javaResult = BitcoinLikeTransactionRequest.init(javaParam_0, javaParam_1, javaParam_2, javaParam_3, lockTime);

        String uuid = UUID.randomUUID().toString();
        self.bridge.javaObjects.put(uuid, javaResult);
        Map<String, String> finalResult = new HashMap<String, String>();
        finalResult.put("type","RCTCoreBitcoinLikeTransactionRequest");
        finalResult.put("uid",uuid);
        promise.resolve(finalResult);
    }
}
