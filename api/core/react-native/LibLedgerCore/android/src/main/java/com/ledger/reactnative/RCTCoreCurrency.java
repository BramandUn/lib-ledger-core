// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from currency.djinni

package com.ledger.reactnative;

import Currency;
import RCTCoreBitcoinLikeNetworkParameters;
import RCTCoreCurrencyUnit;
import co.ledger.core.BitcoinLikeNetworkParameters;
import co.ledger.core.CurrencyUnit;
import co.ledger.core.WalletType;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.ArrayList;
import java.util.UUID;;

/**Structure of cryptocurrency */
public class RCTCoreCurrency extends ReactContextBaseJavaModule {
    private final ReactApplicationContext reactContext;
    private Map<String, Currency> javaObjects;

    public RCTCoreCurrency(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, Currency>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreCurrency";
    }
    public static void init(WalletType walletType, String name, int bip44CoinType, String paymentUriScheme, ArrayList <HashMap <String, String>> * units, Option<HashMap <String, String>> bitcoinLikeNetworkParameters, Promise promise) {
        ArrayList<HashMap <String, String>> javaParam_4 = new ArrayList<HashMap <String, String>>();
        for (HashMap <String, String> units_elem : units)
        {
            RCTCoreCurrencyUnit rctParam_units_elem = (RCTCoreCurrencyUnit)self.bridge.moduleForName("RCTCoreCurrencyUnit");
            CurrencyUnit javaParam_4_elem = (CurrencyUnit)rctParam_units_elem.javaObjects.get(units_elem.get("uid"));
            javaParam_4.add(javaParam_4_elem);
        }
        RCTCoreBitcoinLikeNetworkParameters rctParam_bitcoinLikeNetworkParameters = (RCTCoreBitcoinLikeNetworkParameters)self.bridge.moduleForName("RCTCoreBitcoinLikeNetworkParameters");
        BitcoinLikeNetworkParameters javaParam_5 = (BitcoinLikeNetworkParameters)rctParam_bitcoinLikeNetworkParameters.javaObjects.get(bitcoinLikeNetworkParameters.get("uid"));
        Currency javaResult = Currency.init(walletType, name, bip44CoinType, paymentUriScheme, javaParam_4, javaParam_5);

        String uuid = UUID.randomUUID().toString();
        self.bridge.javaObjects.put(uuid, javaResult);
        Map<String, String> finalResult = new HashMap<String, String>();
        finalResult.put("type","RCTCoreCurrency");
        finalResult.put("uid",uuid);
        promise.resolve(finalResult);
    }
}
