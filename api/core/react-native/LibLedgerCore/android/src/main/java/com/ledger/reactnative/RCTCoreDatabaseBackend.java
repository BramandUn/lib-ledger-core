// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

package com.ledger.reactnative;

import co.ledger.core.DatabaseBackend;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

/**Class representing a database */
public class RCTCoreDatabaseBackend extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, DatabaseBackend> javaObjects;
    public Map<String, DatabaseBackend> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreDatabaseBackend(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, DatabaseBackend>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreDatabaseBackend";
    }

    /**
     *Set database's user name
     *@param username, string
     *@return DatabaseBackend object, databse with user name set
     */
    @ReactMethod
    public void setUsername(Map<String, String> currentInstance, String username, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DatabaseBackend currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreDatabaseBackend instance passed to setUsername method");
            }

            DatabaseBackend javaResult = currentInstanceObj.setUsername(username);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDatabaseBackend");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::setUsername : Failed to return DatabaseBackend from setUsername method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Set database's password
     *@param password, string
     *@return DatabaseBackend object, database with password set
     */
    @ReactMethod
    public void setPassword(Map<String, String> currentInstance, String pwd, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DatabaseBackend currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreDatabaseBackend instance passed to setPassword method");
            }

            DatabaseBackend javaResult = currentInstanceObj.setPassword(pwd);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDatabaseBackend");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::setPassword : Failed to return DatabaseBackend from setPassword method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Set database's host which storing database
     *@param host, string
     *@return DatabaseBackend object, database with host set
     */
    @ReactMethod
    public void setHost(Map<String, String> currentInstance, String host, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DatabaseBackend currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreDatabaseBackend instance passed to setHost method");
            }

            DatabaseBackend javaResult = currentInstanceObj.setHost(host);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDatabaseBackend");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::setHost : Failed to return DatabaseBackend from setHost method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Set database's host's address
     *@param hostAddr, string, host's address
     *@return DatabaseBackend object, database with host's address set
     */
    @ReactMethod
    public void setHostAddr(Map<String, String> currentInstance, String hostAddr, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DatabaseBackend currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreDatabaseBackend instance passed to setHostAddr method");
            }

            DatabaseBackend javaResult = currentInstanceObj.setHostAddr(hostAddr);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDatabaseBackend");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::setHostAddr : Failed to return DatabaseBackend from setHostAddr method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Set database's port on which it connects to host
     *@param port, string
     *@return DatabaseBackend object, database with port set
     */
    @ReactMethod
    public void setPort(Map<String, String> currentInstance, String port, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DatabaseBackend currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreDatabaseBackend instance passed to setPort method");
            }

            DatabaseBackend javaResult = currentInstanceObj.setPort(port);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDatabaseBackend");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::setPort : Failed to return DatabaseBackend from setPort method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Set database's specific options
     *@param opts, string
     *@return DatabaseBackend object, database with options set
     */
    @ReactMethod
    public void setOptions(Map<String, String> currentInstance, String opts, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DatabaseBackend currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreDatabaseBackend instance passed to setOptions method");
            }

            DatabaseBackend javaResult = currentInstanceObj.setOptions(opts);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDatabaseBackend");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::setOptions : Failed to return DatabaseBackend from setOptions method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Set database's mode (SSL) of security interaction of type databse/server
     *@param mode, string
     *@return DatabaseBackend object, database with mode set
     */
    @ReactMethod
    public void setSslMode(Map<String, String> currentInstance, String mode, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DatabaseBackend currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreDatabaseBackend instance passed to setSslMode method");
            }

            DatabaseBackend javaResult = currentInstanceObj.setSslMode(mode);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDatabaseBackend");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::setSslMode : Failed to return DatabaseBackend from setSslMode method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Set database's Kerberos name used to secure (authentication) user/databse interaction
     *@param name, string
     *@return DatabaseBackend object, database with Kerberos name set
     */
    @ReactMethod
    public void setKerberosName(Map<String, String> currentInstance, String name, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DatabaseBackend currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreDatabaseBackend instance passed to setKerberosName method");
            }

            DatabaseBackend javaResult = currentInstanceObj.setKerberosName(name);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDatabaseBackend");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::setKerberosName : Failed to return DatabaseBackend from setKerberosName method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**TODO */
    @ReactMethod
    public void setService(Map<String, String> currentInstance, String service, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DatabaseBackend currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreDatabaseBackend instance passed to setService method");
            }

            DatabaseBackend javaResult = currentInstanceObj.setService(service);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDatabaseBackend");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::setService : Failed to return DatabaseBackend from setService method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void setConnectionPoolSize(Map<String, String> currentInstance, int size, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DatabaseBackend currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreDatabaseBackend instance passed to setConnectionPoolSize method");
            }

            DatabaseBackend javaResult = currentInstanceObj.setConnectionPoolSize(size);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDatabaseBackend");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::setConnectionPoolSize : Failed to return DatabaseBackend from setConnectionPoolSize method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void enableQueryLogging(Map<String, String> currentInstance, boolean enable, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DatabaseBackend currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreDatabaseBackend instance passed to enableQueryLogging method");
            }

            DatabaseBackend javaResult = currentInstanceObj.enableQueryLogging(enable);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDatabaseBackend");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::enableQueryLogging : Failed to return DatabaseBackend from enableQueryLogging method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Return database's name
     *@return string
     */
    @ReactMethod
    public void getUsername(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DatabaseBackend currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreDatabaseBackend instance passed to getUsername method");
            }

            String javaResult = currentInstanceObj.getUsername();
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::getUsername : Failed to return String from getUsername method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Return database's password
     *@return string
     */
    @ReactMethod
    public void getPassword(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DatabaseBackend currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreDatabaseBackend instance passed to getPassword method");
            }

            String javaResult = currentInstanceObj.getPassword();
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::getPassword : Failed to return String from getPassword method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Return database's host
     *@return string
     */
    @ReactMethod
    public void getHost(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DatabaseBackend currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreDatabaseBackend instance passed to getHost method");
            }

            String javaResult = currentInstanceObj.getHost();
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::getHost : Failed to return String from getHost method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Return database's host's address
     *@return string
     */
    @ReactMethod
    public void getHostAddr(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DatabaseBackend currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreDatabaseBackend instance passed to getHostAddr method");
            }

            String javaResult = currentInstanceObj.getHostAddr();
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::getHostAddr : Failed to return String from getHostAddr method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Return database's port
     *@return string
     */
    @ReactMethod
    public void getPort(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DatabaseBackend currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreDatabaseBackend instance passed to getPort method");
            }

            String javaResult = currentInstanceObj.getPort();
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::getPort : Failed to return String from getPort method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Return database's options
     *@return string
     */
    @ReactMethod
    public void getOptions(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DatabaseBackend currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreDatabaseBackend instance passed to getOptions method");
            }

            String javaResult = currentInstanceObj.getOptions();
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::getOptions : Failed to return String from getOptions method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Return database's SSL mode
     *@return string
     */
    @ReactMethod
    public void getSslMode(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DatabaseBackend currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreDatabaseBackend instance passed to getSslMode method");
            }

            String javaResult = currentInstanceObj.getSslMode();
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::getSslMode : Failed to return String from getSslMode method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Return database's Kerberos name
     *@return string
     */
    @ReactMethod
    public void getKerberosName(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DatabaseBackend currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreDatabaseBackend instance passed to getKerberosName method");
            }

            String javaResult = currentInstanceObj.getKerberosName();
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::getKerberosName : Failed to return String from getKerberosName method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**TODO */
    @ReactMethod
    public void getService(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DatabaseBackend currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreDatabaseBackend instance passed to getService method");
            }

            String javaResult = currentInstanceObj.getService();
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::getService : Failed to return String from getService method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void getConnectionPoolSize(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DatabaseBackend currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreDatabaseBackend instance passed to getConnectionPoolSize method");
            }

            int javaResult = currentInstanceObj.getConnectionPoolSize();
            Map<String, int> result = new HashMap<String, int>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::getConnectionPoolSize : Failed to return int from getConnectionPoolSize method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void isLoggingEnabled(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DatabaseBackend currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreDatabaseBackend instance passed to isLoggingEnabled method");
            }

            boolean javaResult = currentInstanceObj.isLoggingEnabled();
            Map<String, boolean> result = new HashMap<String, boolean>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::isLoggingEnabled : Failed to return boolean from isLoggingEnabled method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Create an instance of SQLite3 database
     *@return DatabaseBackend object
     */
    @ReactMethod
    public void getSqlite3Backend(Map<String, String> currentInstance, Promise promise) {
        try
        {
            DatabaseBackend javaResult = DatabaseBackend.getSqlite3Backend();

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDatabaseBackend");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::getSqlite3Backend : Failed to return DatabaseBackend from getSqlite3Backend method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Create an instance of PostgreSQL database
     *@return DatabaseBackend object
     */
    @ReactMethod
    public void getPostgreSQLBackend(Map<String, String> currentInstance, Promise promise) {
        try
        {
            DatabaseBackend javaResult = DatabaseBackend.getPostgreSQLBackend();

            String uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBackend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDatabaseBackend");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDatabaseBackend::getPostgreSQLBackend : Failed to return DatabaseBackend from getPostgreSQLBackend method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
