// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

package com.ledger.reactnative;

import co.ledger.core.DerivationPath;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

public class RCTCoreDerivationPath extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, DerivationPath> javaObjects;
    public Map<String, DerivationPath> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreDerivationPath(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, DerivationPath>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreDerivationPath";
    }
    @ReactMethod
    public void release(Map<String, String> currentInstance, Promise promise)
    {
        String uid = currentInstance.get("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreDerivationPath", "First parameter of RCTCoreDerivationPath::release should be an instance of RCTCoreDerivationPath");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        ArrayList<String> result = new ArrayList<String>();
        for (Map.Entry<String, DerivationPath> elem : this.javaObjects.entrySet())
        {
            result.add(elem.getKey());
        }
        promise.resolve(0);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }

    /** Get the number of element in this path. */
    @ReactMethod
    public void getDepth(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DerivationPath currentInstanceObj = this.javaObjects.get(sUid);

            int javaResult = currentInstanceObj.getDepth();
            Map<String, Integer> result = new HashMap<String, Integer>();
            result.put("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Get the child num at the given index in the path. */
    @ReactMethod
    public void getChildNum(Map<String, String> currentInstance, int index, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DerivationPath currentInstanceObj = this.javaObjects.get(sUid);

            int javaResult = currentInstanceObj.getChildNum(index);
            Map<String, Integer> result = new HashMap<String, Integer>();
            result.put("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get the child num at the given index in the path. If the child num is hardened, returns it
     * without the hardened marker bit.
     */
    @ReactMethod
    public void getUnhardenedChildNum(Map<String, String> currentInstance, int index, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DerivationPath currentInstanceObj = this.javaObjects.get(sUid);

            int javaResult = currentInstanceObj.getUnhardenedChildNum(index);
            Map<String, Integer> result = new HashMap<String, Integer>();
            result.put("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Return true if the given index in the path is an hardened child num. */
    @ReactMethod
    public void isHardened(Map<String, String> currentInstance, int index, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DerivationPath currentInstanceObj = this.javaObjects.get(sUid);

            boolean javaResult = currentInstanceObj.isHardened(index);
            Map<String, Boolean> result = new HashMap<String, Boolean>();
            result.put("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Serialize the given path to a human readable string like "44'/0'/0'/0/0" */
    @ReactMethod
    public void toString(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DerivationPath currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.toString();
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Return a derivation path without the last element, e.g. the parent of "44'/0'/0'/0/0" is
     * "44'/0'/0'/0"
     */
    @ReactMethod
    public void getParent(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DerivationPath currentInstanceObj = this.javaObjects.get(sUid);

            DerivationPath javaResult = currentInstanceObj.getParent();

            String uuid = UUID.randomUUID().toString();
            RCTCoreDerivationPath rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDerivationPath.class);
            rctImpl_javaResult.getJavaObjects().put(uuid, javaResult);
            HashMap<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDerivationPath");
            result.put("uid",uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Return an array where which item is a child num of the path. */
    @ReactMethod
    public void toArray(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            DerivationPath currentInstanceObj = this.javaObjects.get(sUid);

            ArrayList<Integer> javaResult = currentInstanceObj.toArray();
            Map<String, ArrayList<Integer>> result = new HashMap<String, ArrayList<Integer>>();
            result.put("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void parse(String path, Promise promise) {
        try
        {
            DerivationPath javaResult = DerivationPath.parse(path);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDerivationPath rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDerivationPath.class);
            rctImpl_javaResult.getJavaObjects().put(uuid, javaResult);
            HashMap<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDerivationPath");
            result.put("uid",uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
}
