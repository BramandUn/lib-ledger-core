// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

package com.ledger.reactnative;

import DerivationPath;
import RCTCoreDerivationPath;
import co.ledger.core.DerivationPath;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.ArrayList;
import java.util.UUID;;

public class RCTCoreDerivationPath extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, DerivationPath> javaObjects;

    public RNLedgerCoreModule(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, DerivationPath>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreDerivationPath";
    }

    /** Get the number of element in this path. */
    @ReactMethod
    public void getDepth(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DerivationPath currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDerivationPath instance passed to getDepth method");
            }

            int javaResult = currentInstanceObj.getDepth();
            Map<String, int> result = new HashMap<String, int>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDerivationPath::getDepth : Failed to return int from getDepth method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /** Get the child num at the given index in the path. */
    @ReactMethod
    public void getChildNum(Map<String, String> currentInstance, int index, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DerivationPath currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDerivationPath instance passed to getChildNum method");
            }

            int javaResult = currentInstanceObj.getChildNum(index);
            Map<String, int> result = new HashMap<String, int>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDerivationPath::getChildNum : Failed to return int from getChildNum method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Get the child num at the given index in the path. If the child num is hardened, returns it
     * without the hardened marker bit.
     */
    @ReactMethod
    public void getUnhardenedChildNum(Map<String, String> currentInstance, int index, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DerivationPath currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDerivationPath instance passed to getUnhardenedChildNum method");
            }

            int javaResult = currentInstanceObj.getUnhardenedChildNum(index);
            Map<String, int> result = new HashMap<String, int>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDerivationPath::getUnhardenedChildNum : Failed to return int from getUnhardenedChildNum method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /** Return true if the given index in the path is an hardened child num. */
    @ReactMethod
    public void isHardened(Map<String, String> currentInstance, int index, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DerivationPath currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDerivationPath instance passed to isHardened method");
            }

            boolean javaResult = currentInstanceObj.isHardened(index);
            Map<String, boolean> result = new HashMap<String, boolean>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDerivationPath::isHardened : Failed to return boolean from isHardened method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /** Serialize the given path to a human readable string like "44'/0'/0'/0/0" */
    @ReactMethod
    public void toString(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DerivationPath currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDerivationPath instance passed to toString method");
            }

            String javaResult = currentInstanceObj.toString();
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDerivationPath::toString : Failed to return String from toString method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Return a derivation path without the last element, e.g. the parent of "44'/0'/0'/0/0" is
     * "44'/0'/0'/0"
     */
    @ReactMethod
    public void getParent(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DerivationPath currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDerivationPath instance passed to getParent method");
            }

            DerivationPath javaResult = currentInstanceObj.getParent();

            String uuid = UUID.randomUUID().toString();
            RCTCoreDerivationPath rctImpl_objcResult = (RCTCoreDerivationPath)self.bridge moduleForName("RCTCoreDerivationPath");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDerivationPath");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDerivationPath::getParent : Failed to return DerivationPath from getParent method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /** Return an array where which item is a child num of the path. */
    @ReactMethod
    public void toArray(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DerivationPath currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDerivationPath instance passed to toArray method");
            }

            ArrayList<Integer> javaResult = currentInstanceObj.toArray();
            Map<String, ArrayList<Integer>> result = new HashMap<String, ArrayList<Integer>>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDerivationPath::toArray : Failed to return ArrayList<Integer> from toArray method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void parse(Map<String, String> currentInstance, String path, Promise promise) {
        try
        {
            DerivationPath javaResult = DerivationPath.parse(path);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDerivationPath rctImpl_objcResult = (RCTCoreDerivationPath)self.bridge moduleForName("RCTCoreDerivationPath");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDerivationPath");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDerivationPath::parse : Failed to return DerivationPath from parse method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
