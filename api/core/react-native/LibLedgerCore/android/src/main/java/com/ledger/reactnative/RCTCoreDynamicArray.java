// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from dynamic.djinni

package com.ledger.reactnative;

import DynamicArray;
import RCTCoreDynamicArray;
import RCTCoreDynamicObject;
import co.ledger.core.DynamicArray;
import co.ledger.core.DynamicObject;
import co.ledger.core.DynamicType;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.UUID;;

/**
 *Class representing an object that holds references to different types of objects,
 *those references are appended dynamically in an array like structure and can be retrieved by their index
 */
public class RCTCoreDynamicArray extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, DynamicArray> javaObjects;

    public RNLedgerCoreModule(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, DynamicArray>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreDynamicArray";
    }

    /**
     *Get count of stored references
     *@return 64 bits integer
     */
    @ReactMethod
    public void size(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to size method");
            }

            long javaResult = currentInstanceObj.size();
            Map<String, long> result = new HashMap<String, long>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::size : Failed to return long from size method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Push a 32 bits integer
     *@param value, 32 bits integer
     *@return DynamicArray with value stored in it
     */
    @ReactMethod
    public void pushInt(Map<String, String> currentInstance, int value, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to pushInt method");
            }

            DynamicArray javaResult = currentInstanceObj.pushInt(value);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicArray rctImpl_objcResult = (RCTCoreDynamicArray)self.bridge moduleForName("RCTCoreDynamicArray");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicArray");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::pushInt : Failed to return DynamicArray from pushInt method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Push a 64 bits integer
     *@param value, 64 bits integer
     *@return DynamicArray with value stored in it
     */
    @ReactMethod
    public void pushLong(Map<String, String> currentInstance, long value, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to pushLong method");
            }

            DynamicArray javaResult = currentInstanceObj.pushLong(value);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicArray rctImpl_objcResult = (RCTCoreDynamicArray)self.bridge moduleForName("RCTCoreDynamicArray");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicArray");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::pushLong : Failed to return DynamicArray from pushLong method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Push a string
     *@param value, string
     *@return DynamicArray with value stored in it
     */
    @ReactMethod
    public void pushString(Map<String, String> currentInstance, String value, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to pushString method");
            }

            DynamicArray javaResult = currentInstanceObj.pushString(value);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicArray rctImpl_objcResult = (RCTCoreDynamicArray)self.bridge moduleForName("RCTCoreDynamicArray");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicArray");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::pushString : Failed to return DynamicArray from pushString method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Push a double
     *@param value, double
     *@return DynamicArray with value stored in it
     */
    @ReactMethod
    public void pushDouble(Map<String, String> currentInstance, double value, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to pushDouble method");
            }

            DynamicArray javaResult = currentInstanceObj.pushDouble(value);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicArray rctImpl_objcResult = (RCTCoreDynamicArray)self.bridge moduleForName("RCTCoreDynamicArray");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicArray");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::pushDouble : Failed to return DynamicArray from pushDouble method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Push a binary
     *@param value, binary
     *@return DynamicArray with value stored in it
     */
    @ReactMethod
    public void pushData(Map<String, String> currentInstance, byte[] value, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to pushData method");
            }

            DynamicArray javaResult = currentInstanceObj.pushData(value);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicArray rctImpl_objcResult = (RCTCoreDynamicArray)self.bridge moduleForName("RCTCoreDynamicArray");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicArray");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::pushData : Failed to return DynamicArray from pushData method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Push a bool
     *@param value, bool
     *@return DynamicArray with value stored in it
     */
    @ReactMethod
    public void pushBoolean(Map<String, String> currentInstance, boolean value, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to pushBoolean method");
            }

            DynamicArray javaResult = currentInstanceObj.pushBoolean(value);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicArray rctImpl_objcResult = (RCTCoreDynamicArray)self.bridge moduleForName("RCTCoreDynamicArray");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicArray");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::pushBoolean : Failed to return DynamicArray from pushBoolean method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Push a DynamicObject object
     *@param value, DynamicObject
     *@return DynamicArray with value stored in it
     */
    @ReactMethod
    public void pushObject(Map<String, String> currentInstance, HashMap <String, String> value, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to pushObject method");
            }

            RCTCoreDynamicObject rctParam_value = (RCTCoreDynamicObject)self.bridge.moduleForName("RCTCoreDynamicObject");
            DynamicObject javaParam_0 = (DynamicObject)rctParam_value.javaObjects.get(value.get("uid"));
            DynamicArray javaResult = currentInstanceObj.pushObject(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicArray rctImpl_objcResult = (RCTCoreDynamicArray)self.bridge moduleForName("RCTCoreDynamicArray");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicArray");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::pushObject : Failed to return DynamicArray from pushObject method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Push a DynamicArray object
     *@param value, DynamicArray
     *@return DynamicArray with value stored in it
     */
    @ReactMethod
    public void pushArray(Map<String, String> currentInstance, HashMap <String, String> value, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to pushArray method");
            }

            RCTCoreDynamicArray rctParam_value = (RCTCoreDynamicArray)self.bridge.moduleForName("RCTCoreDynamicArray");
            DynamicArray javaParam_0 = (DynamicArray)rctParam_value.javaObjects.get(value.get("uid"));
            DynamicArray javaResult = currentInstanceObj.pushArray(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicArray rctImpl_objcResult = (RCTCoreDynamicArray)self.bridge moduleForName("RCTCoreDynamicArray");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicArray");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::pushArray : Failed to return DynamicArray from pushArray method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get string at a given index
     *@param index, 64 bits integer
     *@return Optional string
     */
    @ReactMethod
    public void getString(Map<String, String> currentInstance, long index, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to getString method");
            }

            String javaResult = currentInstanceObj.getString(index);
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::getString : Failed to return String from getString method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get 32 bits integer at a given index
     *@param index, 64 bits integer
     *@return Optional 32 bits integer
     */
    @ReactMethod
    public void getInt(Map<String, String> currentInstance, long index, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to getInt method");
            }

            Integer javaResult = currentInstanceObj.getInt(index);
            Map<String, Integer> result = new HashMap<String, Integer>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::getInt : Failed to return Integer from getInt method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get 64 bits integer at a given index
     *@param index, 64 bits integer
     *@return Optional 64 bits integer
     */
    @ReactMethod
    public void getLong(Map<String, String> currentInstance, long index, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to getLong method");
            }

            Long javaResult = currentInstanceObj.getLong(index);
            Map<String, Long> result = new HashMap<String, Long>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::getLong : Failed to return Long from getLong method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get double at a given index
     *@param index, 64 bits integer
     *@return Optional double
     */
    @ReactMethod
    public void getDouble(Map<String, String> currentInstance, long index, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to getDouble method");
            }

            Double javaResult = currentInstanceObj.getDouble(index);
            Map<String, Double> result = new HashMap<String, Double>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::getDouble : Failed to return Double from getDouble method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get binary at a given index
     *@param index, 64 bits integer
     *@return Optional binary
     */
    @ReactMethod
    public void getData(Map<String, String> currentInstance, long index, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to getData method");
            }

            byte[] javaResult = currentInstanceObj.getData(index);
            Map<String, byte[]> result = new HashMap<String, byte[]>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::getData : Failed to return byte[] from getData method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get bool at a given index
     *@param index, 64 bits integer
     *@return Optional bool
     */
    @ReactMethod
    public void getBoolean(Map<String, String> currentInstance, long index, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to getBoolean method");
            }

            Boolean javaResult = currentInstanceObj.getBoolean(index);
            Map<String, Boolean> result = new HashMap<String, Boolean>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::getBoolean : Failed to return Boolean from getBoolean method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get DynamicObject object at a given index
     *@param index, 64 bits integer
     *@return Optional DynamicObject
     */
    @ReactMethod
    public void getObject(Map<String, String> currentInstance, long index, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to getObject method");
            }

            DynamicObject javaResult = currentInstanceObj.getObject(index);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_objcResult = (RCTCoreDynamicObject)self.bridge moduleForName("RCTCoreDynamicObject");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicObject");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::getObject : Failed to return DynamicObject from getObject method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get DynamicArray object at a given index
     *@param index, 64 bits integer
     *@return Optional DynamicArray
     */
    @ReactMethod
    public void getArray(Map<String, String> currentInstance, long index, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to getArray method");
            }

            DynamicArray javaResult = currentInstanceObj.getArray(index);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicArray rctImpl_objcResult = (RCTCoreDynamicArray)self.bridge moduleForName("RCTCoreDynamicArray");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicArray");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::getArray : Failed to return DynamicArray from getArray method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Concatenate current DynamicArray with another one
     *@param array, DynamicArray object to concatenate with
     *@return DynamicArray object, concatenated DynamicArray
     */
    @ReactMethod
    public void concat(Map<String, String> currentInstance, HashMap <String, String> array, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to concat method");
            }

            RCTCoreDynamicArray rctParam_array = (RCTCoreDynamicArray)self.bridge.moduleForName("RCTCoreDynamicArray");
            DynamicArray javaParam_0 = (DynamicArray)rctParam_array.javaObjects.get(array.get("uid"));
            DynamicArray javaResult = currentInstanceObj.concat(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicArray rctImpl_objcResult = (RCTCoreDynamicArray)self.bridge moduleForName("RCTCoreDynamicArray");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicArray");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::concat : Failed to return DynamicArray from concat method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get type of value stored at a given index
     *@param index, 64 bits integer
     *@return Optional DynamicType enum entry
     */
    @ReactMethod
    public void getType(Map<String, String> currentInstance, long index, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to getType method");
            }

            DynamicType javaResult = currentInstanceObj.getType(index);
            Map<String, DynamicType> result = new HashMap<String, DynamicType>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::getType : Failed to return DynamicType from getType method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Delete value stored at given index
     *@param index, 64 bits integer
     *@return bool, true if deletion succeeded
     */
    @ReactMethod
    public void remove(Map<String, String> currentInstance, long index, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to remove method");
            }

            boolean javaResult = currentInstanceObj.remove(index);
            Map<String, boolean> result = new HashMap<String, boolean>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::remove : Failed to return boolean from remove method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Dump whole object's content as string
     *@return string
     */
    @ReactMethod
    public void dump(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to dump method");
            }

            String javaResult = currentInstanceObj.dump();
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::dump : Failed to return String from dump method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Serialize whole object to a binary
     *@return binary
     */
    @ReactMethod
    public void serialize(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to serialize method");
            }

            byte[] javaResult = currentInstanceObj.serialize();
            Map<String, byte[]> result = new HashMap<String, byte[]>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::serialize : Failed to return byte[] from serialize method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get readonly status of object
     *@param bool
     */
    @ReactMethod
    public void isReadOnly(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicArray currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicArray instance passed to isReadOnly method");
            }

            boolean javaResult = currentInstanceObj.isReadOnly();
            Map<String, boolean> result = new HashMap<String, boolean>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::isReadOnly : Failed to return boolean from isReadOnly method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Create a new instance of DynamicArray class
     *@return DynamicArray instance
     */
    @ReactMethod
    public void newInstance(Map<String, String> currentInstance, Promise promise) {
        try
        {
            DynamicArray javaResult = DynamicArray.newInstance();

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicArray rctImpl_objcResult = (RCTCoreDynamicArray)self.bridge moduleForName("RCTCoreDynamicArray");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicArray");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::newInstance : Failed to return DynamicArray from newInstance method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Parse a binary to a DynamicArray
     *@param serialized, binary to parse
     *@return Optional DynamicArray
     */
    @ReactMethod
    public void load(Map<String, String> currentInstance, byte[] serialized, Promise promise) {
        try
        {
            DynamicArray javaResult = DynamicArray.load(serialized);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicArray rctImpl_objcResult = (RCTCoreDynamicArray)self.bridge moduleForName("RCTCoreDynamicArray");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicArray");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicArray::load : Failed to return DynamicArray from load method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
