// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from dynamic.djinni

package com.ledger.reactnative;

import DynamicObject;
import RCTCoreDynamicArray;
import RCTCoreDynamicObject;
import co.ledger.core.DynamicArray;
import co.ledger.core.DynamicObject;
import co.ledger.core.DynamicType;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.ArrayList;
import java.util.UUID;;

/**
 *Class representing an object that stores values of different types of objects,
 *those values are appended dynamically in a map like structure with a given key through which they can be retreived
 */
public class RCTCoreDynamicObject extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, DynamicObject> javaObjects;

    public RNLedgerCoreModule(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, DynamicObject>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreDynamicObject";
    }

    /**
     *Store a string with a given key
     *@param key, string, key to access stored value
     *@param value, string
     *@return DynamicObject object with value stored in it
     */
    @ReactMethod
    public void putString(Map<String, String> currentInstance, String key, String value, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to putString method");
            }

            DynamicObject javaResult = currentInstanceObj.putString(key, value);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_objcResult = (RCTCoreDynamicObject)self.bridge moduleForName("RCTCoreDynamicObject");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicObject");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::putString : Failed to return DynamicObject from putString method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Store a 32 bits integer with a given key
     *@param key, string, key to access stored value
     *@param value, 32 bits integer
     *@return DynamicObject object with value stored in it
     */
    @ReactMethod
    public void putInt(Map<String, String> currentInstance, String key, int value, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to putInt method");
            }

            DynamicObject javaResult = currentInstanceObj.putInt(key, value);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_objcResult = (RCTCoreDynamicObject)self.bridge moduleForName("RCTCoreDynamicObject");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicObject");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::putInt : Failed to return DynamicObject from putInt method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Store a 64 bits integer with a given key
     *@param key, string, key to access stored value
     *@param value, 64 bits integer
     *@return DynamicObject object with value stored in it
     */
    @ReactMethod
    public void putLong(Map<String, String> currentInstance, String key, long value, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to putLong method");
            }

            DynamicObject javaResult = currentInstanceObj.putLong(key, value);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_objcResult = (RCTCoreDynamicObject)self.bridge moduleForName("RCTCoreDynamicObject");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicObject");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::putLong : Failed to return DynamicObject from putLong method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Store a double with a given key
     *@param key, string, key to access stored value
     *@param value, double
     *@return DynamicObject object with value stored in it
     */
    @ReactMethod
    public void putDouble(Map<String, String> currentInstance, String key, double value, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to putDouble method");
            }

            DynamicObject javaResult = currentInstanceObj.putDouble(key, value);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_objcResult = (RCTCoreDynamicObject)self.bridge moduleForName("RCTCoreDynamicObject");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicObject");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::putDouble : Failed to return DynamicObject from putDouble method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Store a binary integer with a given key
     *@param key, string, key to access stored value
     *@param value, binary
     *@return DynamicObject object with value stored in it
     */
    @ReactMethod
    public void putData(Map<String, String> currentInstance, String key, byte[] value, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to putData method");
            }

            DynamicObject javaResult = currentInstanceObj.putData(key, value);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_objcResult = (RCTCoreDynamicObject)self.bridge moduleForName("RCTCoreDynamicObject");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicObject");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::putData : Failed to return DynamicObject from putData method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Store a boolean integer with a given key
     *@param key, string, key to access stored value
     *@param value, bool
     *@return DynamicObject object with value stored in it
     */
    @ReactMethod
    public void putBoolean(Map<String, String> currentInstance, String key, boolean value, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to putBoolean method");
            }

            DynamicObject javaResult = currentInstanceObj.putBoolean(key, value);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_objcResult = (RCTCoreDynamicObject)self.bridge moduleForName("RCTCoreDynamicObject");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicObject");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::putBoolean : Failed to return DynamicObject from putBoolean method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Store another DynamicObject object with a given key
     *@param key, string, key to access stored value
     *@return DynamicObject object with value stored in it
     */
    @ReactMethod
    public void putObject(Map<String, String> currentInstance, String key, HashMap <String, String> value, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to putObject method");
            }

            RCTCoreDynamicObject rctParam_value = (RCTCoreDynamicObject)self.bridge.moduleForName("RCTCoreDynamicObject");
            DynamicObject javaParam_1 = (DynamicObject)rctParam_value.javaObjects.get(value.get("uid"));
            DynamicObject javaResult = currentInstanceObj.putObject(key, javaParam_1);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_objcResult = (RCTCoreDynamicObject)self.bridge moduleForName("RCTCoreDynamicObject");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicObject");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::putObject : Failed to return DynamicObject from putObject method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Store a DynamicArray object with a given key
     *@param key, string, key to access stored reference
     *@return DynamicArray object with value stored in it
     */
    @ReactMethod
    public void putArray(Map<String, String> currentInstance, String key, HashMap <String, String> value, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to putArray method");
            }

            RCTCoreDynamicArray rctParam_value = (RCTCoreDynamicArray)self.bridge.moduleForName("RCTCoreDynamicArray");
            DynamicArray javaParam_1 = (DynamicArray)rctParam_value.javaObjects.get(value.get("uid"));
            DynamicObject javaResult = currentInstanceObj.putArray(key, javaParam_1);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_objcResult = (RCTCoreDynamicObject)self.bridge moduleForName("RCTCoreDynamicObject");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicObject");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::putArray : Failed to return DynamicObject from putArray method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get, if exists, stored string having a specific key
     *@param key, string, key of string to look for
     *@return Optional string
     */
    @ReactMethod
    public void getString(Map<String, String> currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to getString method");
            }

            String javaResult = currentInstanceObj.getString(key);
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::getString : Failed to return String from getString method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get, if exists, stored 32 bits integer having a specific key
     *@param key, string, key of 32 bits integer to look for
     *@return Optional 32 bits integer
     */
    @ReactMethod
    public void getInt(Map<String, String> currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to getInt method");
            }

            Integer javaResult = currentInstanceObj.getInt(key);
            Map<String, Integer> result = new HashMap<String, Integer>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::getInt : Failed to return Integer from getInt method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get, if exists, stored 64 bits integer having a specific key
     *@param key, string, key of 64 bits integer to look for
     *@return Optional 64 bits integer
     */
    @ReactMethod
    public void getLong(Map<String, String> currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to getLong method");
            }

            Long javaResult = currentInstanceObj.getLong(key);
            Map<String, Long> result = new HashMap<String, Long>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::getLong : Failed to return Long from getLong method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get, if exists, stored double having a specific key
     *@param key, string, key of double to look for
     *@return Optional double
     */
    @ReactMethod
    public void getDouble(Map<String, String> currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to getDouble method");
            }

            Double javaResult = currentInstanceObj.getDouble(key);
            Map<String, Double> result = new HashMap<String, Double>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::getDouble : Failed to return Double from getDouble method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get, if exists, stored binary having a specific key
     *@param key, string, key of binary to look for
     *@return Optional binary
     */
    @ReactMethod
    public void getData(Map<String, String> currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to getData method");
            }

            byte[] javaResult = currentInstanceObj.getData(key);
            Map<String, byte[]> result = new HashMap<String, byte[]>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::getData : Failed to return byte[] from getData method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get, if exists, stored bool having a specific key
     *@param key, string, key of bool to look for
     *@return Optional bool
     */
    @ReactMethod
    public void getBoolean(Map<String, String> currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to getBoolean method");
            }

            Boolean javaResult = currentInstanceObj.getBoolean(key);
            Map<String, Boolean> result = new HashMap<String, Boolean>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::getBoolean : Failed to return Boolean from getBoolean method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get, if exists, stored DynamicObject having a specific key
     *@param key, string, key of DynamicObject to look for
     *@return Optional DynamicObject
     */
    @ReactMethod
    public void getObject(Map<String, String> currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to getObject method");
            }

            DynamicObject javaResult = currentInstanceObj.getObject(key);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_objcResult = (RCTCoreDynamicObject)self.bridge moduleForName("RCTCoreDynamicObject");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicObject");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::getObject : Failed to return DynamicObject from getObject method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get, if exists, stored DynamicArray having a specific key
     *@param key, string, key of DynamicArray to look for
     *@return Optional DynamicArray
     */
    @ReactMethod
    public void getArray(Map<String, String> currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to getArray method");
            }

            DynamicArray javaResult = currentInstanceObj.getArray(key);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicArray rctImpl_objcResult = (RCTCoreDynamicArray)self.bridge moduleForName("RCTCoreDynamicArray");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicArray");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::getArray : Failed to return DynamicArray from getArray method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Check if a key was used to store a value
     *@param key, string, key to look for
     *@return bool
     */
    @ReactMethod
    public void contains(Map<String, String> currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to contains method");
            }

            boolean javaResult = currentInstanceObj.contains(key);
            Map<String, boolean> result = new HashMap<String, boolean>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::contains : Failed to return boolean from contains method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Delete key and value stored with it
     *@param key, string, key to look for
     *@return bool, true if key exists and deletion succeeded, false otherwise
     */
    @ReactMethod
    public void remove(Map<String, String> currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to remove method");
            }

            boolean javaResult = currentInstanceObj.remove(key);
            Map<String, boolean> result = new HashMap<String, boolean>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::remove : Failed to return boolean from remove method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get list of keys
     *@return list of string, list all stored keys
     */
    @ReactMethod
    public void getKeys(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to getKeys method");
            }

            ArrayList<String> javaResult = currentInstanceObj.getKeys();
            Map<String, ArrayList<String>> result = new HashMap<String, ArrayList<String>>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::getKeys : Failed to return ArrayList<String> from getKeys method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get type of object stored with specific key
     *@param key, string, key to look for
     *@return Optional DynamicType enum entry
     */
    @ReactMethod
    public void getType(Map<String, String> currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to getType method");
            }

            DynamicType javaResult = currentInstanceObj.getType(key);
            Map<String, DynamicType> result = new HashMap<String, DynamicType>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::getType : Failed to return DynamicType from getType method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Dump whole object's content as string
     *@return string
     */
    @ReactMethod
    public void dump(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to dump method");
            }

            String javaResult = currentInstanceObj.dump();
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::dump : Failed to return String from dump method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Serialize whole object to a binary
     *@return binary
     */
    @ReactMethod
    public void serialize(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to serialize method");
            }

            byte[] javaResult = currentInstanceObj.serialize();
            Map<String, byte[]> result = new HashMap<String, byte[]>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::serialize : Failed to return byte[] from serialize method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get readonly status of object
     *@param bool
     */
    @ReactMethod
    public void isReadOnly(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to isReadOnly method");
            }

            boolean javaResult = currentInstanceObj.isReadOnly();
            Map<String, boolean> result = new HashMap<String, boolean>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::isReadOnly : Failed to return boolean from isReadOnly method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get count of stored references
     *@return 64 bits integer
     */
    @ReactMethod
    public void size(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            DynamicObject currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreDynamicObject instance passed to size method");
            }

            long javaResult = currentInstanceObj.size();
            Map<String, long> result = new HashMap<String, long>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::size : Failed to return long from size method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Create a new instance of DynamicObject class
     *@return DynamicObject instance
     */
    @ReactMethod
    public void newInstance(Map<String, String> currentInstance, Promise promise) {
        try
        {
            DynamicObject javaResult = DynamicObject.newInstance();

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_objcResult = (RCTCoreDynamicObject)self.bridge moduleForName("RCTCoreDynamicObject");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicObject");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::newInstance : Failed to return DynamicObject from newInstance method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Parse a binary to a DynamicObject
     *@param serialized, binary to parse
     *@return Optional DynamicObject
     */
    @ReactMethod
    public void load(Map<String, String> currentInstance, byte[] serialized, Promise promise) {
        try
        {
            DynamicObject javaResult = DynamicObject.load(serialized);

            String uuid = UUID.randomUUID().toString();
            RCTCoreDynamicObject rctImpl_objcResult = (RCTCoreDynamicObject)self.bridge moduleForName("RCTCoreDynamicObject");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreDynamicObject");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreDynamicObject::load : Failed to return DynamicObject from load method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
