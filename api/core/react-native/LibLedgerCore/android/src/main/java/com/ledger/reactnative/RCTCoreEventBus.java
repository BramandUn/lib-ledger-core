// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from emitter.djinni

package com.ledger.reactnative;

import EventBus;
import RCTCoreEventReceiver;
import RCTCoreExecutionContext;
import co.ledger.core.EventReceiver;
import co.ledger.core.ExecutionContext;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.UUID;;

/**Class representing an event bus through which a receiver gets notified */
public class RCTCoreEventBus extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, EventBus> javaObjects;

    public RCTCoreEventBus(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, EventBus>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreEventBus";
    }

    /**
     *Subscribe an event receiver to the event bus
     *@param context, ExecutionContext object, execution context in which receiver will be notified
     *@param reveiver, EventReceiver object, receiver that event bu will notify
     */
    @ReactMethod
    public void subscribe(Map<String, String> currentInstance, HashMap <String, String> context, HashMap <String, String> receiver, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            EventBus currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreEventBus instance passed to subscribe method");
            }

            RCTCoreExecutionContext rctParam_context = (RCTCoreExecutionContext)self.bridge.moduleForName("RCTCoreExecutionContext");
            ExecutionContext javaParam_0 = (ExecutionContext)rctParam_context.javaObjects.get(context.get("uid"));
            RCTCoreEventReceiver rctParam_receiver = (RCTCoreEventReceiver)self.bridge.moduleForName("RCTCoreEventReceiver");
            EventReceiver javaParam_1 = (EventReceiver)rctParam_receiver.javaObjects.get(receiver.get("uid"));
            currentInstanceObj.subscribe(javaParam_0, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Unsubscribe an event receiver from the event bus
     *@param receiver, EventReceiver object, receiver to unsubscribe
     */
    @ReactMethod
    public void unsubscribe(Map<String, String> currentInstance, HashMap <String, String> receiver, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            EventBus currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreEventBus instance passed to unsubscribe method");
            }

            RCTCoreEventReceiver rctParam_receiver = (RCTCoreEventReceiver)self.bridge.moduleForName("RCTCoreEventReceiver");
            EventReceiver javaParam_0 = (EventReceiver)rctParam_receiver.javaObjects.get(receiver.get("uid"));
            currentInstanceObj.unsubscribe(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
