// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from emitter.djinni

package com.ledger.reactnative;

import EventReceiverImpl;
import RCTCoreEvent;
import co.ledger.core.Event;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.UUID;;

/**Class respresenting an event receiver */
public class RCTCoreEventReceiver extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, EventReceiverImpl> javaObjects;

    public RCTCoreEventReceiver(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, EventReceiverImpl>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreEventReceiver";
    }

    /**
     *Method triggered when an event occurs
     *@param event, Event object that triggers this method
     */
    @ReactMethod
    public void onEvent(Map<String, String> currentInstance, HashMap <String, String> event, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            EventReceiverImpl currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreEventReceiver instance passed to onEvent method");
            }

            RCTCoreEvent rctParam_event = (RCTCoreEvent)self.bridge.moduleForName("RCTCoreEvent");
            Event javaParam_0 = (Event)rctParam_event.javaObjects.get(event.get("uid"));
            currentInstanceObj.onEvent(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
