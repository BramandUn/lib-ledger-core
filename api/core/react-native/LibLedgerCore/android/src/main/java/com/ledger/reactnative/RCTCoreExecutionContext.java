// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from thread_dispatcher.djinni

package com.ledger.reactnative;

import ExecutionContextImpl;
import RCTCoreRunnable;
import co.ledger.core.Runnable;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.UUID;;

/**Class representing context in which tasks get executed */
public class RCTCoreExecutionContext extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, ExecutionContextImpl> javaObjects;

    public RNLedgerCoreModule(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, ExecutionContextImpl>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreExecutionContext";
    }

    /**
     *Execute a given runnable
     *@param runnalbe, Runnable object
     */
    @ReactMethod
    public void execute(Map<String, String> currentInstance, HashMap <String, String> runnable, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            ExecutionContextImpl currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreExecutionContext instance passed to execute method");
            }

            RCTCoreRunnable rctParam_runnable = (RCTCoreRunnable)self.bridge.moduleForName("RCTCoreRunnable");
            Runnable javaParam_0 = (Runnable)rctParam_runnable.javaObjects.get(runnable.get("uid"));
            currentInstanceObj.execute(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Execute a given runnable with a delay
     *@param runnalbe, Runnable object
     *@param millis, 64 bits integer, delay in milli-seconds
     */
    @ReactMethod
    public void delay(Map<String, String> currentInstance, HashMap <String, String> runnable, long millis, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            ExecutionContextImpl currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreExecutionContext instance passed to delay method");
            }

            RCTCoreRunnable rctParam_runnable = (RCTCoreRunnable)self.bridge.moduleForName("RCTCoreRunnable");
            Runnable javaParam_0 = (Runnable)rctParam_runnable.javaObjects.get(runnable.get("uid"));
            currentInstanceObj.delay(javaParam_0, millis);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
