// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from core.djinni

package com.ledger.reactnative;

import co.ledger.core.LedgerCore;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

public class RCTCoreLedgerCore extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, LedgerCore> javaObjects;
    public Map<String, LedgerCore> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreLedgerCore(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, LedgerCore>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreLedgerCore";
    }

    /**
     * Gets the version of the library as a human readable string.
     * @return The version of the library (e.g. '1.0.1')
     */
    @ReactMethod
    public void getStringVersion(Promise promise) {
        try
        {
            String javaResult = LedgerCore.getStringVersion();
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get the integer version of the Library
     * @return The integer version of the library
     */
    @ReactMethod
    public void getIntVersion(Promise promise) {
        try
        {
            int javaResult = LedgerCore.getIntVersion();
            Map<String, Integer> result = new HashMap<String, Integer>();
            result.put("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
}
