// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from logger.djinni

package com.ledger.reactnative;

import Logger;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.UUID;;

/**Class to print logs to console */
public class RCTCoreLogger extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, Logger> javaObjects;

    public RNLedgerCoreModule(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, Logger>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreLogger";
    }

    /**
     *Print debug message to console
     *@param tag, string
     *@param message, string
     */
    @ReactMethod
    public void d(Map<String, String> currentInstance, String tag, String message, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Logger currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreLogger instance passed to d method");
            }

            currentInstanceObj.d(tag, message);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Print information message to console
     *@param tag, string
     *@param message, string
     */
    @ReactMethod
    public void i(Map<String, String> currentInstance, String tag, String message, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Logger currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreLogger instance passed to i method");
            }

            currentInstanceObj.i(tag, message);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Print error message to console
     *@param tag, string
     *@param message, string
     */
    @ReactMethod
    public void e(Map<String, String> currentInstance, String tag, String message, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Logger currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreLogger instance passed to e method");
            }

            currentInstanceObj.e(tag, message);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Print warning message to console
     *@param tag, string
     *@param message, string
     */
    @ReactMethod
    public void w(Map<String, String> currentInstance, String tag, String message, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Logger currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreLogger instance passed to w method");
            }

            currentInstanceObj.w(tag, message);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Print critical error message to console
     *@param tag, string
     *@param message, string
     */
    @ReactMethod
    public void c(Map<String, String> currentInstance, String tag, String message, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Logger currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreLogger instance passed to c method");
            }

            currentInstanceObj.c(tag, message);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
