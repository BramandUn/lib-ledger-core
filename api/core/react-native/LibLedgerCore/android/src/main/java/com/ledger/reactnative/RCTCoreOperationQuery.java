// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

package com.ledger.reactnative;

import OperationQuery;
import RCTCoreOperationListCallback;
import RCTCoreOperationQuery;
import RCTCoreQueryFilter;
import co.ledger.core.OperationListCallback;
import co.ledger.core.OperationOrderKey;
import co.ledger.core.OperationQuery;
import co.ledger.core.QueryFilter;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.UUID;;

/**Class respresenting a query for a set of operations */
public class RCTCoreOperationQuery extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, OperationQuery> javaObjects;

    public RNLedgerCoreModule(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, OperationQuery>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreOperationQuery";
    }

    /**
     *Apply given order to query's operation
     *@param key, OperationOrderKey object which defines order
     *@param descending, bool
     *@return OperationQuery object, new ordered operation
     */
    @ReactMethod
    public void addOrder(Map<String, String> currentInstance, OperationOrderKey key, boolean descending, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            OperationQuery currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreOperationQuery instance passed to addOrder method");
            }

            OperationQuery javaResult = currentInstanceObj.addOrder(key, descending);

            String uuid = UUID.randomUUID().toString();
            RCTCoreOperationQuery rctImpl_objcResult = (RCTCoreOperationQuery)self.bridge moduleForName("RCTCoreOperationQuery");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreOperationQuery");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreOperationQuery::addOrder : Failed to return OperationQuery from addOrder method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get applied filter on operation query
     *@return QueryFilter object
     */
    @ReactMethod
    public void filter(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            OperationQuery currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreOperationQuery instance passed to filter method");
            }

            QueryFilter javaResult = currentInstanceObj.filter();

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreOperationQuery::filter : Failed to return QueryFilter from filter method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Add offset to the operation query
     *@param from, 64 bits integer
     */
    @ReactMethod
    public void offset(Map<String, String> currentInstance, long from, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            OperationQuery currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreOperationQuery instance passed to offset method");
            }

            OperationQuery javaResult = currentInstanceObj.offset(from);

            String uuid = UUID.randomUUID().toString();
            RCTCoreOperationQuery rctImpl_objcResult = (RCTCoreOperationQuery)self.bridge moduleForName("RCTCoreOperationQuery");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreOperationQuery");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreOperationQuery::offset : Failed to return OperationQuery from offset method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Add limit to the operation query results
     *@param count, 64 bits integer
     */
    @ReactMethod
    public void limit(Map<String, String> currentInstance, long count, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            OperationQuery currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreOperationQuery instance passed to limit method");
            }

            OperationQuery javaResult = currentInstanceObj.limit(count);

            String uuid = UUID.randomUUID().toString();
            RCTCoreOperationQuery rctImpl_objcResult = (RCTCoreOperationQuery)self.bridge moduleForName("RCTCoreOperationQuery");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreOperationQuery");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreOperationQuery::limit : Failed to return OperationQuery from limit method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *TODO
     *Complete the operation query
     */
    @ReactMethod
    public void complete(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            OperationQuery currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreOperationQuery instance passed to complete method");
            }

            OperationQuery javaResult = currentInstanceObj.complete();

            String uuid = UUID.randomUUID().toString();
            RCTCoreOperationQuery rctImpl_objcResult = (RCTCoreOperationQuery)self.bridge moduleForName("RCTCoreOperationQuery");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreOperationQuery");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreOperationQuery::complete : Failed to return OperationQuery from complete method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**TODO */
    @ReactMethod
    public void partial(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            OperationQuery currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreOperationQuery instance passed to partial method");
            }

            OperationQuery javaResult = currentInstanceObj.partial();

            String uuid = UUID.randomUUID().toString();
            RCTCoreOperationQuery rctImpl_objcResult = (RCTCoreOperationQuery)self.bridge moduleForName("RCTCoreOperationQuery");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreOperationQuery");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreOperationQuery::partial : Failed to return OperationQuery from partial method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Execute query to retrieve operations
     *@param callback, if execute method succeed, ListCallback object returning a List of Operation objects
     */
    @ReactMethod
    public void execute(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            OperationQuery currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreOperationQuery instance passed to execute method");
            }

            RCTCoreOperationListCallback javaParam_0 = rctParamType.initWithPromise(promise, self.bridge);
            currentInstanceObj.execute(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
