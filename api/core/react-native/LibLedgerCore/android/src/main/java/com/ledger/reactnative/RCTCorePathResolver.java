// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from path_resolver.djinni

package com.ledger.reactnative;

import PathResolverImpl;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.UUID;;

/**
 * Module used to resolve file paths. libledger-core has its own iternal representation of the file system that may not
 * be adapted for the runtime platform. All path given to the PathResolver are absolute.
 */
public class RCTCorePathResolver extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, PathResolverImpl> javaObjects;

    public RNLedgerCoreModule(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, PathResolverImpl>();
    }

    @Override
    public String getName()
    {
        return "RCTCorePathResolver";
    }

    /**
     * Resolves the path for a SQLite database file.
     * @param path The path to resolve.
     * @return The resolved path.
     */
    @ReactMethod
    public void resolveDatabasePath(Map<String, String> currentInstance, String path, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            PathResolverImpl currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCorePathResolver instance passed to resolveDatabasePath method");
            }

            String javaResult = currentInstanceObj.resolveDatabasePath(path);
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCorePathResolver::resolveDatabasePath : Failed to return String from resolveDatabasePath method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Resolves the path of a single log file.
     * @param path The path to resolve.
     * @return The resolved path.
     */
    @ReactMethod
    public void resolveLogFilePath(Map<String, String> currentInstance, String path, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            PathResolverImpl currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCorePathResolver instance passed to resolveLogFilePath method");
            }

            String javaResult = currentInstanceObj.resolveLogFilePath(path);
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCorePathResolver::resolveLogFilePath : Failed to return String from resolveLogFilePath method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Resolves the path for a json file.
     * @param path The path to resolve.
     * @return The resolved path.
     */
    @ReactMethod
    public void resolvePreferencesPath(Map<String, String> currentInstance, String path, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            PathResolverImpl currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCorePathResolver instance passed to resolvePreferencesPath method");
            }

            String javaResult = currentInstanceObj.resolvePreferencesPath(path);
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCorePathResolver::resolvePreferencesPath : Failed to return String from resolvePreferencesPath method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
