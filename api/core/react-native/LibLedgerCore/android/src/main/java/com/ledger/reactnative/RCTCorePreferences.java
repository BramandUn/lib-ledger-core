// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from preferences.djinni

package com.ledger.reactnative;

import co.ledger.core.Preferences;
import co.ledger.core.PreferencesEditor;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

/**
 * Interface for accessing and modifying custom preferences. Preferences are key - value data which will be persisted to
 * the filesystem. They can be local or stored with the Ledger API backend (encrypted by a user secret). This can be used to
 * attach application data to the libledger-core modules (i.e. a wallet pool, a wallet, an account, an operation). This interface
 * is highly inspired by Android SharedPreferences.
 */
public class RCTCorePreferences extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, Preferences> javaObjects;
    public Map<String, Preferences> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCorePreferences(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, Preferences>();
    }

    @Override
    public String getName()
    {
        return "RCTCorePreferences";
    }

    /**
     * Retrieves the value associated with the given key or fallback to the default value.
     * @return The data associated with the key or fallbackValue.
     */
    @ReactMethod
    public void getString(Map<String, String> currentInstance, String key, String fallbackValue, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            Preferences currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getString(key, fallbackValue);
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Retrieves the value associated with the given key or fallback to the default value.
     * @return The data associated with the key or fallbackValue.
     */
    @ReactMethod
    public void getInt(Map<String, String> currentInstance, String key, int fallbackValue, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            Preferences currentInstanceObj = this.javaObjects.get(sUid);

            int javaResult = currentInstanceObj.getInt(key, fallbackValue);
            Map<String, Integer> result = new HashMap<String, Integer>();
            result.put("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Retrieves the value associated with the given key or fallback to the default value.
     * @return The data associated with the key or fallbackValue.
     */
    @ReactMethod
    public void getLong(Map<String, String> currentInstance, String key, long fallbackValue, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            Preferences currentInstanceObj = this.javaObjects.get(sUid);

            long javaResult = currentInstanceObj.getLong(key, fallbackValue);
            Map<String, Long> result = new HashMap<String, Long>();
            result.put("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Retrieves the value associated with the given key or fallback to the default value.
     * @return The data associated with the key or fallbackValue.
     */
    @ReactMethod
    public void getBoolean(Map<String, String> currentInstance, String key, boolean fallbackValue, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            Preferences currentInstanceObj = this.javaObjects.get(sUid);

            boolean javaResult = currentInstanceObj.getBoolean(key, fallbackValue);
            Map<String, Boolean> result = new HashMap<String, Boolean>();
            result.put("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Retrieves the value associated with the given key or fallback to the default value.
     * @return The data associated with the key or fallbackValue.
     */
    @ReactMethod
    public void getStringArray(Map<String, String> currentInstance, String key, ArrayList<String> fallbackValue, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            Preferences currentInstanceObj = this.javaObjects.get(sUid);

            ArrayList<String> javaResult = currentInstanceObj.getStringArray(key, fallbackValue);
            Map<String, ArrayList<String>> result = new HashMap<String, ArrayList<String>>();
            result.put("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Retrieves the value associated with the given key or fallback to the default value.
     * @return The data associated with the key or fallbackValue.
     */
    @ReactMethod
    public void getData(Map<String, String> currentInstance, String key, byte[] fallbackValue, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            Preferences currentInstanceObj = this.javaObjects.get(sUid);

            byte[] javaResult = currentInstanceObj.getData(key, fallbackValue);
            Map<String, byte[]> result = new HashMap<String, byte[]>();
            result.put("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Checks whether the Preferences contains the given key.
     * @return true the preferences contains the key, false otherwise.
     */
    @ReactMethod
    public void contains(Map<String, String> currentInstance, String key, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            Preferences currentInstanceObj = this.javaObjects.get(sUid);

            boolean javaResult = currentInstanceObj.contains(key);
            Map<String, Boolean> result = new HashMap<String, Boolean>();
            result.put("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get a preferences editor in order to add/modify/remove data.
     * @return An interface for editting preferences.
     */
    @ReactMethod
    public void edit(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            Preferences currentInstanceObj = this.javaObjects.get(sUid);

            PreferencesEditor javaResult = currentInstanceObj.edit();

            String uuid = UUID.randomUUID().toString();
            RCTCorePreferencesEditor rctImpl_javaResult = this.reactContext.getNativeModule(RCTCorePreferencesEditor.class);
            rctImpl_javaResult.getJavaObjects().put(uuid, javaResult);
            HashMap<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCorePreferencesEditor");
            result.put("uid",uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
}
