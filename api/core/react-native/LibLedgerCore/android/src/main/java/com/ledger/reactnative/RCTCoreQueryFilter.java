// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

package com.ledger.reactnative;

import QueryFilter;
import RCTCoreAmount;
import RCTCoreQueryFilter;
import co.ledger.core.Amount;
import co.ledger.core.OperationType;
import co.ledger.core.QueryFilter;
import co.ledger.core.TrustLevel;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.Date;
import java.util.UUID;;

/**TODO */
public class RCTCoreQueryFilter extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, QueryFilter> javaObjects;

    public RNLedgerCoreModule(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, QueryFilter>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreQueryFilter";
    }

    @ReactMethod
    public void accountEq(Map<String, String> currentInstance, String accountUid, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.accountEq(accountUid);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::accountEq : Failed to return QueryFilter from accountEq method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void accountNeq(Map<String, String> currentInstance, String accountUid, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.accountNeq(accountUid);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::accountNeq : Failed to return QueryFilter from accountNeq method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void dateLte(Map<String, String> currentInstance, Date time, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.dateLte(time);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::dateLte : Failed to return QueryFilter from dateLte method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void dateLt(Map<String, String> currentInstance, Date time, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.dateLt(time);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::dateLt : Failed to return QueryFilter from dateLt method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void dateGt(Map<String, String> currentInstance, Date time, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.dateGt(time);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::dateGt : Failed to return QueryFilter from dateGt method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void dateGte(Map<String, String> currentInstance, Date time, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.dateGte(time);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::dateGte : Failed to return QueryFilter from dateGte method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void dateEq(Map<String, String> currentInstance, Date time, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.dateEq(time);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::dateEq : Failed to return QueryFilter from dateEq method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void dateNeq(Map<String, String> currentInstance, Date time, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.dateNeq(time);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::dateNeq : Failed to return QueryFilter from dateNeq method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void containsRecipient(Map<String, String> currentInstance, String recipientAddress, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.containsRecipient(recipientAddress);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::containsRecipient : Failed to return QueryFilter from containsRecipient method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void containsSender(Map<String, String> currentInstance, String senderAddress, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.containsSender(senderAddress);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::containsSender : Failed to return QueryFilter from containsSender method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void currencyEq(Map<String, String> currentInstance, String currencyName, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.currencyEq(currencyName);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::currencyEq : Failed to return QueryFilter from currencyEq method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void operationUidEq(Map<String, String> currentInstance, String operationUid, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.operationUidEq(operationUid);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::operationUidEq : Failed to return QueryFilter from operationUidEq method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void operationUidNeq(Map<String, String> currentInstance, String operationUid, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.operationUidNeq(operationUid);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::operationUidNeq : Failed to return QueryFilter from operationUidNeq method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void trustEq(Map<String, String> currentInstance, TrustLevel trust, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.trustEq(trust);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::trustEq : Failed to return QueryFilter from trustEq method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void trustNeq(Map<String, String> currentInstance, TrustLevel trust, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.trustNeq(trust);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::trustNeq : Failed to return QueryFilter from trustNeq method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void feesEq(Map<String, String> currentInstance, HashMap <String, String> amount, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.feesEq(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::feesEq : Failed to return QueryFilter from feesEq method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void feesNeq(Map<String, String> currentInstance, HashMap <String, String> amount, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.feesNeq(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::feesNeq : Failed to return QueryFilter from feesNeq method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void feesGte(Map<String, String> currentInstance, HashMap <String, String> amount, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.feesGte(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::feesGte : Failed to return QueryFilter from feesGte method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void feesGt(Map<String, String> currentInstance, HashMap <String, String> amount, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.feesGt(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::feesGt : Failed to return QueryFilter from feesGt method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void feesLte(Map<String, String> currentInstance, HashMap <String, String> amount, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.feesLte(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::feesLte : Failed to return QueryFilter from feesLte method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void feesLt(Map<String, String> currentInstance, HashMap <String, String> amount, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.feesLt(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::feesLt : Failed to return QueryFilter from feesLt method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void amountEq(Map<String, String> currentInstance, HashMap <String, String> amount, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.amountEq(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::amountEq : Failed to return QueryFilter from amountEq method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void amountNeq(Map<String, String> currentInstance, HashMap <String, String> amount, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.amountNeq(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::amountNeq : Failed to return QueryFilter from amountNeq method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void amountGte(Map<String, String> currentInstance, HashMap <String, String> amount, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.amountGte(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::amountGte : Failed to return QueryFilter from amountGte method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void amountGt(Map<String, String> currentInstance, HashMap <String, String> amount, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.amountGt(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::amountGt : Failed to return QueryFilter from amountGt method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void amountLte(Map<String, String> currentInstance, HashMap <String, String> amount, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.amountLte(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::amountLte : Failed to return QueryFilter from amountLte method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void amountLt(Map<String, String> currentInstance, HashMap <String, String> amount, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.amountLt(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::amountLt : Failed to return QueryFilter from amountLt method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void blockHeightEq(Map<String, String> currentInstance, long blockHeight, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.blockHeightEq(blockHeight);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::blockHeightEq : Failed to return QueryFilter from blockHeightEq method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void blockHeightNeq(Map<String, String> currentInstance, long blockHeight, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.blockHeightNeq(blockHeight);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::blockHeightNeq : Failed to return QueryFilter from blockHeightNeq method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void blockHeightGte(Map<String, String> currentInstance, long blockHeight, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.blockHeightGte(blockHeight);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::blockHeightGte : Failed to return QueryFilter from blockHeightGte method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void blockHeightGt(Map<String, String> currentInstance, long blockHeight, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.blockHeightGt(blockHeight);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::blockHeightGt : Failed to return QueryFilter from blockHeightGt method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void blockHeightLte(Map<String, String> currentInstance, long blockHeight, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.blockHeightLte(blockHeight);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::blockHeightLte : Failed to return QueryFilter from blockHeightLte method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void blockHeightLt(Map<String, String> currentInstance, long blockHeight, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.blockHeightLt(blockHeight);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::blockHeightLt : Failed to return QueryFilter from blockHeightLt method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void blockHeightIsNull(Map<String, String> currentInstance, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.blockHeightIsNull();

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::blockHeightIsNull : Failed to return QueryFilter from blockHeightIsNull method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void operationTypeEq(Map<String, String> currentInstance, OperationType operationType, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.operationTypeEq(operationType);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::operationTypeEq : Failed to return QueryFilter from operationTypeEq method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void operationTypeNeq(Map<String, String> currentInstance, OperationType operationType, Promise promise) {
        try
        {
            QueryFilter javaResult = QueryFilter.operationTypeNeq(operationType);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::operationTypeNeq : Failed to return QueryFilter from operationTypeNeq method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void opAnd(Map<String, String> currentInstance, HashMap <String, String> filter, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            QueryFilter currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreQueryFilter instance passed to opAnd method");
            }

            RCTCoreQueryFilter rctParam_filter = (RCTCoreQueryFilter)self.bridge.moduleForName("RCTCoreQueryFilter");
            QueryFilter javaParam_0 = (QueryFilter)rctParam_filter.javaObjects.get(filter.get("uid"));
            QueryFilter javaResult = currentInstanceObj.opAnd(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::opAnd : Failed to return QueryFilter from opAnd method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void opOr(Map<String, String> currentInstance, HashMap <String, String> filter, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            QueryFilter currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreQueryFilter instance passed to opOr method");
            }

            RCTCoreQueryFilter rctParam_filter = (RCTCoreQueryFilter)self.bridge.moduleForName("RCTCoreQueryFilter");
            QueryFilter javaParam_0 = (QueryFilter)rctParam_filter.javaObjects.get(filter.get("uid"));
            QueryFilter javaResult = currentInstanceObj.opOr(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::opOr : Failed to return QueryFilter from opOr method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void opAndNot(Map<String, String> currentInstance, HashMap <String, String> filter, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            QueryFilter currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreQueryFilter instance passed to opAndNot method");
            }

            RCTCoreQueryFilter rctParam_filter = (RCTCoreQueryFilter)self.bridge.moduleForName("RCTCoreQueryFilter");
            QueryFilter javaParam_0 = (QueryFilter)rctParam_filter.javaObjects.get(filter.get("uid"));
            QueryFilter javaResult = currentInstanceObj.opAndNot(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::opAndNot : Failed to return QueryFilter from opAndNot method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void opOrNot(Map<String, String> currentInstance, HashMap <String, String> filter, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            QueryFilter currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreQueryFilter instance passed to opOrNot method");
            }

            RCTCoreQueryFilter rctParam_filter = (RCTCoreQueryFilter)self.bridge.moduleForName("RCTCoreQueryFilter");
            QueryFilter javaParam_0 = (QueryFilter)rctParam_filter.javaObjects.get(filter.get("uid"));
            QueryFilter javaResult = currentInstanceObj.opOrNot(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreQueryFilter rctImpl_objcResult = (RCTCoreQueryFilter)self.bridge moduleForName("RCTCoreQueryFilter");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreQueryFilter");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreQueryFilter::opOrNot : Failed to return QueryFilter from opOrNot method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
