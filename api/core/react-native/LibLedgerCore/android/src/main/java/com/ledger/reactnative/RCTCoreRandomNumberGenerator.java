// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from random.djinni

package com.ledger.reactnative;

import RandomNumberGeneratorImpl;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.UUID;;

/** Class to generate random numbers */
public class RCTCoreRandomNumberGenerator extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, RandomNumberGeneratorImpl> javaObjects;

    public RNLedgerCoreModule(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, RandomNumberGeneratorImpl>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreRandomNumberGenerator";
    }

    /**
     * Generates random bytes.
     * @params size number of bytes to generate
     * @return 'size' random bytes
     */
    @ReactMethod
    public void getRandomBytes(Map<String, String> currentInstance, int size, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            RandomNumberGeneratorImpl currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreRandomNumberGenerator instance passed to getRandomBytes method");
            }

            byte[] javaResult = currentInstanceObj.getRandomBytes(size);
            Map<String, byte[]> result = new HashMap<String, byte[]>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreRandomNumberGenerator::getRandomBytes : Failed to return byte[] from getRandomBytes method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Generates random 32 bits integer.
     * @return random 32 bits integer
     */
    @ReactMethod
    public void getRandomInt(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            RandomNumberGeneratorImpl currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreRandomNumberGenerator instance passed to getRandomInt method");
            }

            int javaResult = currentInstanceObj.getRandomInt();
            Map<String, int> result = new HashMap<String, int>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreRandomNumberGenerator::getRandomInt : Failed to return int from getRandomInt method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Generates random 64 bits integer.
     * @return random 64 bits integer
     */
    @ReactMethod
    public void getRandomLong(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            RandomNumberGeneratorImpl currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreRandomNumberGenerator instance passed to getRandomLong method");
            }

            long javaResult = currentInstanceObj.getRandomLong();
            Map<String, long> result = new HashMap<String, long>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreRandomNumberGenerator::getRandomLong : Failed to return long from getRandomLong method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Generates random byte.
     * @return random byte
     */
    @ReactMethod
    public void getRandomByte(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            RandomNumberGeneratorImpl currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreRandomNumberGenerator instance passed to getRandomByte method");
            }

            byte javaResult = currentInstanceObj.getRandomByte();
            Map<String, byte> result = new HashMap<String, byte>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreRandomNumberGenerator::getRandomByte : Failed to return byte from getRandomByte method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
