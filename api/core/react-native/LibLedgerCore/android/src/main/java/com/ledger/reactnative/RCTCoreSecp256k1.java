// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from secp256k1.djinni

package com.ledger.reactnative;

import RCTCoreSecp256k1;
import Secp256k1;
import co.ledger.core.Secp256k1;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.UUID;;

/**Class implementing secp256k1 used in Bitcoin */
public class RCTCoreSecp256k1 extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, Secp256k1> javaObjects;

    public RNLedgerCoreModule(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, Secp256k1>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreSecp256k1";
    }

    /**
     * Create an instance of Secp256k1
     * @return Secp256k1 instance
     */
    @ReactMethod
    public void createInstance(Map<String, String> currentInstance, Promise promise) {
        try
        {
            Secp256k1 javaResult = Secp256k1.createInstance();

            String uuid = UUID.randomUUID().toString();
            RCTCoreSecp256k1 rctImpl_objcResult = (RCTCoreSecp256k1)self.bridge moduleForName("RCTCoreSecp256k1");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreSecp256k1");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreSecp256k1::createInstance : Failed to return Secp256k1 from createInstance method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Generates public key from private key.
     * @param privKey 32 byte private key
     * @param compress get compressed (35 bytes) or uncompressed (65 bytes)
     * @return public key can be compressed (35 bytes starting with 02 or 03) or un compressed (65 bytes starting with 04)
     */
    @ReactMethod
    public void computePubKey(Map<String, String> currentInstance, byte[] privKey, boolean compress, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Secp256k1 currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreSecp256k1 instance passed to computePubKey method");
            }

            byte[] javaResult = currentInstanceObj.computePubKey(privKey, compress);
            Map<String, byte[]> result = new HashMap<String, byte[]>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreSecp256k1::computePubKey : Failed to return byte[] from computePubKey method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Signs message using a given private key
     * @param privKey 32 bytes private key
     * @param data 32 bytes message to sign
     * @return 32 bytes signed message
     */
    @ReactMethod
    public void sign(Map<String, String> currentInstance, byte[] privKey, byte[] data, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Secp256k1 currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreSecp256k1 instance passed to sign method");
            }

            byte[] javaResult = currentInstanceObj.sign(privKey, data);
            Map<String, byte[]> result = new HashMap<String, byte[]>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreSecp256k1::sign : Failed to return byte[] from sign method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * Check if message was signed with given signature and public key
     * @param data 32 bytes signed message
     * @param signature 32 bytes signature (generated from private key)
     * @param oubkey 32 bytes public key
     * @return true if message was signed with signature and public key (both issued from same private key)
     */
    @ReactMethod
    public void verify(Map<String, String> currentInstance, byte[] data, byte[] signature, byte[] pubKey, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Secp256k1 currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreSecp256k1 instance passed to verify method");
            }

            boolean javaResult = currentInstanceObj.verify(data, signature, pubKey);
            Map<String, boolean> result = new HashMap<String, boolean>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreSecp256k1::verify : Failed to return boolean from verify method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void newInstance(Map<String, String> currentInstance, Promise promise) {
        try
        {
            Secp256k1 javaResult = Secp256k1.newInstance();

            String uuid = UUID.randomUUID().toString();
            RCTCoreSecp256k1 rctImpl_objcResult = (RCTCoreSecp256k1)self.bridge moduleForName("RCTCoreSecp256k1");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreSecp256k1");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreSecp256k1::newInstance : Failed to return Secp256k1 from newInstance method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
