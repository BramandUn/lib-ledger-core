// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from thread_dispatcher.djinni

package com.ledger.reactnative;

import RCTCoreExecutionContext;
import RCTCoreLock;
import ThreadDispatcherImpl;
import co.ledger.core.ExecutionContext;
import co.ledger.core.Lock;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.UUID;;

/**Class representing a thread dispatcher */
public class RCTCoreThreadDispatcher extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, ThreadDispatcherImpl> javaObjects;

    public RNLedgerCoreModule(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, ThreadDispatcherImpl>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreThreadDispatcher";
    }

    /**
     *Get an execution context where tasks are executed sequentially
     *@param name, string, name of execution context to retrieve
     *@return ExecutionContext object
     */
    @ReactMethod
    public void getSerialExecutionContext(Map<String, String> currentInstance, String name, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            ThreadDispatcherImpl currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreThreadDispatcher instance passed to getSerialExecutionContext method");
            }

            ExecutionContext javaResult = currentInstanceObj.getSerialExecutionContext(name);

            String uuid = UUID.randomUUID().toString();
            RCTCoreExecutionContext rctImpl_objcResult = (RCTCoreExecutionContext)self.bridge moduleForName("RCTCoreExecutionContext");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreExecutionContext");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreThreadDispatcher::getSerialExecutionContext : Failed to return ExecutionContext from getSerialExecutionContext method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get an execution context where tasks are executed in parallel thanks to a thread pool
     *where a system of inter-thread communication was designed
     *@param name, string, name of execution context to retrieve
     *@return ExecutionContext object
     */
    @ReactMethod
    public void getThreadPoolExecutionContext(Map<String, String> currentInstance, String name, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            ThreadDispatcherImpl currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreThreadDispatcher instance passed to getThreadPoolExecutionContext method");
            }

            ExecutionContext javaResult = currentInstanceObj.getThreadPoolExecutionContext(name);

            String uuid = UUID.randomUUID().toString();
            RCTCoreExecutionContext rctImpl_objcResult = (RCTCoreExecutionContext)self.bridge moduleForName("RCTCoreExecutionContext");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreExecutionContext");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreThreadDispatcher::getThreadPoolExecutionContext : Failed to return ExecutionContext from getThreadPoolExecutionContext method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get main execution context (generally where tasks that should never get blocked are executed)
     *@return ExecutionContext object
     */
    @ReactMethod
    public void getMainExecutionContext(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            ThreadDispatcherImpl currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreThreadDispatcher instance passed to getMainExecutionContext method");
            }

            ExecutionContext javaResult = currentInstanceObj.getMainExecutionContext();

            String uuid = UUID.randomUUID().toString();
            RCTCoreExecutionContext rctImpl_objcResult = (RCTCoreExecutionContext)self.bridge moduleForName("RCTCoreExecutionContext");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreExecutionContext");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreThreadDispatcher::getMainExecutionContext : Failed to return ExecutionContext from getMainExecutionContext method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get lock to handle multithreading
     *@return Lock object
     */
    @ReactMethod
    public void newLock(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            ThreadDispatcherImpl currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreThreadDispatcher instance passed to newLock method");
            }

            Lock javaResult = currentInstanceObj.newLock();

            String uuid = UUID.randomUUID().toString();
            RCTCoreLock rctImpl_objcResult = (RCTCoreLock)self.bridge moduleForName("RCTCoreLock");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreLock");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreThreadDispatcher::newLock : Failed to return Lock from newLock method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
