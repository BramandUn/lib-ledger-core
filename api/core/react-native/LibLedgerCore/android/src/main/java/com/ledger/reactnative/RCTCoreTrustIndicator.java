// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

package com.ledger.reactnative;

import TrustIndicator;
import co.ledger.core.TrustLevel;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.ArrayList;
import java.util.UUID;;

/**TODO */
public class RCTCoreTrustIndicator extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, TrustIndicator> javaObjects;

    public RNLedgerCoreModule(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, TrustIndicator>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreTrustIndicator";
    }

    @ReactMethod
    public void getTrustWeight(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            TrustIndicator currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreTrustIndicator instance passed to getTrustWeight method");
            }

            int javaResult = currentInstanceObj.getTrustWeight();
            Map<String, int> result = new HashMap<String, int>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreTrustIndicator::getTrustWeight : Failed to return int from getTrustWeight method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void getTrustLevel(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            TrustIndicator currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreTrustIndicator instance passed to getTrustLevel method");
            }

            TrustLevel javaResult = currentInstanceObj.getTrustLevel();
            Map<String, TrustLevel> result = new HashMap<String, TrustLevel>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreTrustIndicator::getTrustLevel : Failed to return TrustLevel from getTrustLevel method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void getConflictingOperationUids(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            TrustIndicator currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreTrustIndicator instance passed to getConflictingOperationUids method");
            }

            ArrayList<String> javaResult = currentInstanceObj.getConflictingOperationUids();
            Map<String, ArrayList<String>> result = new HashMap<String, ArrayList<String>>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreTrustIndicator::getConflictingOperationUids : Failed to return ArrayList<String> from getConflictingOperationUids method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void getOrigin(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            TrustIndicator currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreTrustIndicator instance passed to getOrigin method");
            }

            String javaResult = currentInstanceObj.getOrigin();
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreTrustIndicator::getOrigin : Failed to return String from getOrigin method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
