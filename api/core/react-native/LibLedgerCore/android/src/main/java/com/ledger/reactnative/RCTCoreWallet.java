// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

package com.ledger.reactnative;

import RCTCoreAccountCallback;
import RCTCoreAccountCreationInfo;
import RCTCoreAccountCreationInfoCallback;
import RCTCoreAccountListCallback;
import RCTCoreBitcoinLikeWallet;
import RCTCoreBlockCallback;
import RCTCoreCurrency;
import RCTCoreErrorCodeCallback;
import RCTCoreEventBus;
import RCTCoreExtendedKeyAccountCreationInfo;
import RCTCoreExtendedKeyAccountCreationInfoCallback;
import RCTCoreI32Callback;
import RCTCoreLogger;
import RCTCorePreferences;
import Wallet;
import co.ledger.core.AccountCallback;
import co.ledger.core.AccountCreationInfo;
import co.ledger.core.AccountCreationInfoCallback;
import co.ledger.core.AccountListCallback;
import co.ledger.core.BitcoinLikeWallet;
import co.ledger.core.BlockCallback;
import co.ledger.core.Currency;
import co.ledger.core.ErrorCodeCallback;
import co.ledger.core.EventBus;
import co.ledger.core.ExtendedKeyAccountCreationInfo;
import co.ledger.core.ExtendedKeyAccountCreationInfoCallback;
import co.ledger.core.I32Callback;
import co.ledger.core.Logger;
import co.ledger.core.Preferences;
import co.ledger.core.WalletType;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.Date;
import java.util.UUID;;

/**Class representing a wallet */
public class RCTCoreWallet extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, Wallet> javaObjects;

    public RNLedgerCoreModule(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, Wallet>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreWallet";
    }

    /**
     *Get name of wallet
     *@return string
     */
    @ReactMethod
    public void getName(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to getName method");
            }

            String javaResult = currentInstanceObj.getName();
            Map<String, String> result = new HashMap<String, String>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWallet::getName : Failed to return String from getName method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get account with specific index
     *@param index, 32 bits integer, index of account in wallet
     *@param callback, Callback returning, if getAccount succeed, an Account object with given index
     */
    @ReactMethod
    public void getAccount(Map<String, String> currentInstance, int index, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to getAccount method");
            }

            RCTCoreAccountCallback javaParam_1 = rctParamType.initWithPromise(promise, self.bridge);
            currentInstanceObj.getAccount(index, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get number of accounts instanciated under wallet
     *@param callback, Callback returning, if getAccountCount succeed, a 32 bits integer representing number of accounts
     */
    @ReactMethod
    public void getAccountCount(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to getAccountCount method");
            }

            RCTCoreI32Callback javaParam_0 = rctParamType.initWithPromise(promise, self.bridge);
            currentInstanceObj.getAccountCount(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get list of accounts instanciated under wallet in a given range
     *@param offset, 32 bits integer from which we retrieve accounts
     *@param count, 32 bits integer, number of accounts to retrieve
     *@param callback, ListCallback returning, if getAccounts succeed, list of Accounts object
     */
    @ReactMethod
    public void getAccounts(Map<String, String> currentInstance, int offset, int count, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to getAccounts method");
            }

            RCTCoreAccountListCallback javaParam_2 = rctParamType.initWithPromise(promise, self.bridge);
            currentInstanceObj.getAccounts(offset, count, javaParam_2);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get index of next account to create
     *@return callback, Callback returning a 32 bits integer
     */
    @ReactMethod
    public void getNextAccountIndex(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to getNextAccountIndex method");
            }

            RCTCoreI32Callback javaParam_0 = rctParamType.initWithPromise(promise, self.bridge);
            currentInstanceObj.getNextAccountIndex(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Return event bus through which wallet synchronizes it's accounts and interact with blockchain
     *@return EventBus object
     */
    @ReactMethod
    public void getEventBus(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to getEventBus method");
            }

            EventBus javaResult = currentInstanceObj.getEventBus();

            String uuid = UUID.randomUUID().toString();
            RCTCoreEventBus rctImpl_objcResult = (RCTCoreEventBus)self.bridge moduleForName("RCTCoreEventBus");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreEventBus");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWallet::getEventBus : Failed to return EventBus from getEventBus method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Return synchronization status wallet, true if at least one of accounts is synchronizing
     *@return bool
     */
    @ReactMethod
    public void isSynchronizing(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to isSynchronizing method");
            }

            boolean javaResult = currentInstanceObj.isSynchronizing();
            Map<String, boolean> result = new HashMap<String, boolean>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWallet::isSynchronizing : Failed to return boolean from isSynchronizing method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Start synchronization of all accounts under wallet
     *@return EventBus object through which wallet get notified of account's synchronization status
     */
    @ReactMethod
    public void synchronize(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to synchronize method");
            }

            EventBus javaResult = currentInstanceObj.synchronize();

            String uuid = UUID.randomUUID().toString();
            RCTCoreEventBus rctImpl_objcResult = (RCTCoreEventBus)self.bridge moduleForName("RCTCoreEventBus");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreEventBus");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWallet::synchronize : Failed to return EventBus from synchronize method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get wallet preferences
     *@return Preferences object
     */
    @ReactMethod
    public void getPreferences(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to getPreferences method");
            }

            Preferences javaResult = currentInstanceObj.getPreferences();

            String uuid = UUID.randomUUID().toString();
            RCTCorePreferences rctImpl_objcResult = (RCTCorePreferences)self.bridge moduleForName("RCTCorePreferences");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCorePreferences");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWallet::getPreferences : Failed to return Preferences from getPreferences method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Return account's logger which provides all needed (e.g. database) logs
     *@return Logger Object
     */
    @ReactMethod
    public void getLogger(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to getLogger method");
            }

            Logger javaResult = currentInstanceObj.getLogger();

            String uuid = UUID.randomUUID().toString();
            RCTCoreLogger rctImpl_objcResult = (RCTCoreLogger)self.bridge moduleForName("RCTCoreLogger");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreLogger");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWallet::getLogger : Failed to return Logger from getLogger method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get preferences of specific account
     *@param index, 32 bits integer, account's index
     *@return Preferences object
     */
    @ReactMethod
    public void getAccountPreferences(Map<String, String> currentInstance, int index, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to getAccountPreferences method");
            }

            Preferences javaResult = currentInstanceObj.getAccountPreferences(index);

            String uuid = UUID.randomUUID().toString();
            RCTCorePreferences rctImpl_objcResult = (RCTCorePreferences)self.bridge moduleForName("RCTCorePreferences");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCorePreferences");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWallet::getAccountPreferences : Failed to return Preferences from getAccountPreferences method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     * asBitcoinLikeWallet(): Callback<BitcoinLikeWallet>;
     * asEthereumLikeWallet(): Callback<EthereumLikeWallet>;
     * asRippleLikeWallet(): Callback<RippleLikeWallet>;
     *Convert wallet to a Bitcoin one
     *@return BitcoinWallet object
     */
    @ReactMethod
    public void asBitcoinLikeWallet(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to asBitcoinLikeWallet method");
            }

            BitcoinLikeWallet javaResult = currentInstanceObj.asBitcoinLikeWallet();

            String uuid = UUID.randomUUID().toString();
            RCTCoreBitcoinLikeWallet rctImpl_objcResult = (RCTCoreBitcoinLikeWallet)self.bridge moduleForName("RCTCoreBitcoinLikeWallet");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreBitcoinLikeWallet");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWallet::asBitcoinLikeWallet : Failed to return BitcoinLikeWallet from asBitcoinLikeWallet method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get currency of wallet
     *@return Currency object
     */
    @ReactMethod
    public void getCurrency(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to getCurrency method");
            }

            Currency javaResult = currentInstanceObj.getCurrency();

            String uuid = UUID.randomUUID().toString();
            RCTCoreCurrency rctImpl_objcResult = (RCTCoreCurrency)self.bridge moduleForName("RCTCoreCurrency");
            rctImpl_objcResult.javaObjects.put(uuid, objcResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreCurrency");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWallet::getCurrency : Failed to return Currency from getCurrency method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Know if wallet is a Bitcoin one
     *@return bool
     */
    @ReactMethod
    public void isInstanceOfBitcoinLikeWallet(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to isInstanceOfBitcoinLikeWallet method");
            }

            boolean javaResult = currentInstanceObj.isInstanceOfBitcoinLikeWallet();
            Map<String, boolean> result = new HashMap<String, boolean>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWallet::isInstanceOfBitcoinLikeWallet : Failed to return boolean from isInstanceOfBitcoinLikeWallet method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Know if wallet is a Ethereum one
     *@return bool
     */
    @ReactMethod
    public void isInstanceOfEthereumLikeWallet(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to isInstanceOfEthereumLikeWallet method");
            }

            boolean javaResult = currentInstanceObj.isInstanceOfEthereumLikeWallet();
            Map<String, boolean> result = new HashMap<String, boolean>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWallet::isInstanceOfEthereumLikeWallet : Failed to return boolean from isInstanceOfEthereumLikeWallet method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Know if wallet is a Ripple one
     *@return bool
     */
    @ReactMethod
    public void isInstanceOfRippleLikeWallet(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to isInstanceOfRippleLikeWallet method");
            }

            boolean javaResult = currentInstanceObj.isInstanceOfRippleLikeWallet();
            Map<String, boolean> result = new HashMap<String, boolean>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWallet::isInstanceOfRippleLikeWallet : Failed to return boolean from isInstanceOfRippleLikeWallet method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get wallet type
     *@return WalletType object
     */
    @ReactMethod
    public void getWalletType(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to getWalletType method");
            }

            WalletType javaResult = currentInstanceObj.getWalletType();
            Map<String, WalletType> result = new HashMap<String, WalletType>();
            result.put("value", javaResult);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWallet::getWalletType : Failed to return WalletType from getWalletType method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get last block of blockchain the wallet operates on
     *@param callback, Callback returning a Block object
     */
    @ReactMethod
    public void getLastBlock(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to getLastBlock method");
            }

            RCTCoreBlockCallback javaParam_0 = rctParamType.initWithPromise(promise, self.bridge);
            currentInstanceObj.getLastBlock(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Return infos about the creation of specific account
     *@param accountIndex, 32 bits account, index of account in wallet
     *@param callback, Callback returning an AccountCreationInfo
     */
    @ReactMethod
    public void getAccountCreationInfo(Map<String, String> currentInstance, int accountIndex, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to getAccountCreationInfo method");
            }

            RCTCoreAccountCreationInfoCallback javaParam_1 = rctParamType.initWithPromise(promise, self.bridge);
            currentInstanceObj.getAccountCreationInfo(accountIndex, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**TODO */
    @ReactMethod
    public void getExtendedKeyAccountCreationInfo(Map<String, String> currentInstance, int accountIndex, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to getExtendedKeyAccountCreationInfo method");
            }

            RCTCoreExtendedKeyAccountCreationInfoCallback javaParam_1 = rctParamType.initWithPromise(promise, self.bridge);
            currentInstanceObj.getExtendedKeyAccountCreationInfo(accountIndex, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Return infos about the next created account
     *@param callback, Callback returning an AccountCreationInfo
     */
    @ReactMethod
    public void getNextAccountCreationInfo(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to getNextAccountCreationInfo method");
            }

            RCTCoreAccountCreationInfoCallback javaParam_0 = rctParamType.initWithPromise(promise, self.bridge);
            currentInstanceObj.getNextAccountCreationInfo(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**TODO */
    @ReactMethod
    public void getNextExtendedKeyAccountCreationInfo(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to getNextExtendedKeyAccountCreationInfo method");
            }

            RCTCoreExtendedKeyAccountCreationInfoCallback javaParam_0 = rctParamType.initWithPromise(promise, self.bridge);
            currentInstanceObj.getNextExtendedKeyAccountCreationInfo(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Get account from given account creation infos
     *@param accountCreationInfo, AccountCreationInfo object
     *@param callback, Callback returning an Account object with given creation infos
     */
    @ReactMethod
    public void newAccountWithInfo(Map<String, String> currentInstance, HashMap <String, String> accountCreationInfo, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to newAccountWithInfo method");
            }

            RCTCoreAccountCreationInfo rctParam_accountCreationInfo = (RCTCoreAccountCreationInfo)self.bridge.moduleForName("RCTCoreAccountCreationInfo");
            AccountCreationInfo javaParam_0 = (AccountCreationInfo)rctParam_accountCreationInfo.javaObjects.get(accountCreationInfo.get("uid"));
            RCTCoreAccountCallback javaParam_1 = rctParamType.initWithPromise(promise, self.bridge);
            currentInstanceObj.newAccountWithInfo(javaParam_0, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**TODO */
    @ReactMethod
    public void newAccountWithExtendedKeyInfo(Map<String, String> currentInstance, HashMap <String, String> extendedKeyAccountCreationInfo, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to newAccountWithExtendedKeyInfo method");
            }

            RCTCoreExtendedKeyAccountCreationInfo rctParam_extendedKeyAccountCreationInfo = (RCTCoreExtendedKeyAccountCreationInfo)self.bridge.moduleForName("RCTCoreExtendedKeyAccountCreationInfo");
            ExtendedKeyAccountCreationInfo javaParam_0 = (ExtendedKeyAccountCreationInfo)rctParam_extendedKeyAccountCreationInfo.javaObjects.get(extendedKeyAccountCreationInfo.get("uid"));
            RCTCoreAccountCallback javaParam_1 = rctParamType.initWithPromise(promise, self.bridge);
            currentInstanceObj.newAccountWithExtendedKeyInfo(javaParam_0, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Erase data (in user's DB) relative to wallet since given date
     *@param date, start date of data deletion
     */
    @ReactMethod
    public void eraseDataSince(Map<String, String> currentInstance, Date date, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            Wallet currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWallet instance passed to eraseDataSince method");
            }

            RCTCoreErrorCodeCallback javaParam_1 = rctParamType.initWithPromise(promise, self.bridge);
            currentInstanceObj.eraseDataSince(date, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
