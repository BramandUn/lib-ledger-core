// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet_pool.djinni

package com.ledger.reactnative;

import co.ledger.core.DatabaseBackend;
import co.ledger.core.DynamicObject;
import co.ledger.core.HttpClient;
import co.ledger.core.LogPrinter;
import co.ledger.core.PathResolver;
import co.ledger.core.RandomNumberGenerator;
import co.ledger.core.ThreadDispatcher;
import co.ledger.core.WalletPoolBuilder;
import co.ledger.core.WalletPoolCallback;
import co.ledger.core.WebSocketClient;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

/**Class representing a wallet pool builder (to instanciate a wallet pool) */
public class RCTCoreWalletPoolBuilder extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, WalletPoolBuilder> javaObjects;
    public Map<String, WalletPoolBuilder> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreWalletPoolBuilder(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, WalletPoolBuilder>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreWalletPoolBuilder";
    }

    /**
     *Set http client to be used for wallet pool build
     *@param client, HttpClient
     *@return WalletPoolBuilder object, instance with wallet pool http client set
     */
    @ReactMethod
    public void setHttpClient(Map<String, String> currentInstance, HashMap <String, String> client, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            WalletPoolBuilder currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreWalletPoolBuilder instance passed to setHttpClient method");
            }

            RCTCoreHttpClient rctParam_client = this.reactContext.getNativeModule(RCTCoreHttpClient.class);
            HttpClient javaParam_0 = (HttpClient)rctParam_client.getJavaObjects.get(client.get("uid"));
            WalletPoolBuilder javaResult = currentInstanceObj.setHttpClient(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreWalletPoolBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreWalletPoolBuilder.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreWalletPoolBuilder");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWalletPoolBuilder::setHttpClient : Failed to return WalletPoolBuilder from setHttpClient method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Set web socket client, through which wallet pool will listen and get notified (by explorers, DBs...)
     *@param client, WebSocketClient object
     *@reutnr WalletPoolBuilder object, instance with wallet pool web socket client set
     */
    @ReactMethod
    public void setWebsocketClient(Map<String, String> currentInstance, HashMap <String, String> client, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            WalletPoolBuilder currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreWalletPoolBuilder instance passed to setWebsocketClient method");
            }

            RCTCoreWebSocketClient rctParam_client = this.reactContext.getNativeModule(RCTCoreWebSocketClient.class);
            WebSocketClient javaParam_0 = (WebSocketClient)rctParam_client.getJavaObjects.get(client.get("uid"));
            WalletPoolBuilder javaResult = currentInstanceObj.setWebsocketClient(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreWalletPoolBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreWalletPoolBuilder.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreWalletPoolBuilder");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWalletPoolBuilder::setWebsocketClient : Failed to return WalletPoolBuilder from setWebsocketClient method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Set path resolver that will be used for wallet pool creation to resolve wallet pool's (DB's, logs, preferences ...) paths
     *@param pathResolver, Pathresolver object
     *@param WalletPoolBuilder object, instance with wallet pool path resolver set
     */
    @ReactMethod
    public void setPathResolver(Map<String, String> currentInstance, HashMap <String, String> pathResolver, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            WalletPoolBuilder currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreWalletPoolBuilder instance passed to setPathResolver method");
            }

            RCTCorePathResolver rctParam_pathResolver = this.reactContext.getNativeModule(RCTCorePathResolver.class);
            PathResolver javaParam_0 = (PathResolver)rctParam_pathResolver.getJavaObjects.get(pathResolver.get("uid"));
            WalletPoolBuilder javaResult = currentInstanceObj.setPathResolver(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreWalletPoolBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreWalletPoolBuilder.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreWalletPoolBuilder");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWalletPoolBuilder::setPathResolver : Failed to return WalletPoolBuilder from setPathResolver method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Set log printer that will be used for wallet pool creation to dump wallet pool's logs (for debug purposes)
     *@param printer, LogPrinter object
     *@param WalletPoolBuilder object, instance with wallet pool logger set
     */
    @ReactMethod
    public void setLogPrinter(Map<String, String> currentInstance, HashMap <String, String> printer, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            WalletPoolBuilder currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreWalletPoolBuilder instance passed to setLogPrinter method");
            }

            RCTCoreLogPrinter rctParam_printer = this.reactContext.getNativeModule(RCTCoreLogPrinter.class);
            LogPrinter javaParam_0 = (LogPrinter)rctParam_printer.getJavaObjects.get(printer.get("uid"));
            WalletPoolBuilder javaResult = currentInstanceObj.setLogPrinter(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreWalletPoolBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreWalletPoolBuilder.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreWalletPoolBuilder");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWalletPoolBuilder::setLogPrinter : Failed to return WalletPoolBuilder from setLogPrinter method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Set thread dispatcher that will be used for wallet pool creation to dispatch wallet pool's tasks through different threads
     *@param dispatcher, ThreadDispatcher object
     *@param WalletPoolBuilder object, instance with wallet pool thread dispatcher set
     */
    @ReactMethod
    public void setThreadDispatcher(Map<String, String> currentInstance, HashMap <String, String> dispatcher, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            WalletPoolBuilder currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreWalletPoolBuilder instance passed to setThreadDispatcher method");
            }

            RCTCoreThreadDispatcher rctParam_dispatcher = this.reactContext.getNativeModule(RCTCoreThreadDispatcher.class);
            ThreadDispatcher javaParam_0 = (ThreadDispatcher)rctParam_dispatcher.getJavaObjects.get(dispatcher.get("uid"));
            WalletPoolBuilder javaResult = currentInstanceObj.setThreadDispatcher(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreWalletPoolBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreWalletPoolBuilder.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreWalletPoolBuilder");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWalletPoolBuilder::setThreadDispatcher : Failed to return WalletPoolBuilder from setThreadDispatcher method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Set name that will be used for wallet pool creation
     *@param name, string
     *@return WalletPoolBuilder object, instance with wallet pool name set
     */
    @ReactMethod
    public void setName(Map<String, String> currentInstance, String name, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            WalletPoolBuilder currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreWalletPoolBuilder instance passed to setName method");
            }

            WalletPoolBuilder javaResult = currentInstanceObj.setName(name);

            String uuid = UUID.randomUUID().toString();
            RCTCoreWalletPoolBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreWalletPoolBuilder.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreWalletPoolBuilder");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWalletPoolBuilder::setName : Failed to return WalletPoolBuilder from setName method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Set password that will be used for wallet pool creation
     *@param password, string
     *@return WalletPoolBuilder object, with wallet pool password set
     */
    @ReactMethod
    public void setPassword(Map<String, String> currentInstance, String password, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            WalletPoolBuilder currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreWalletPoolBuilder instance passed to setPassword method");
            }

            WalletPoolBuilder javaResult = currentInstanceObj.setPassword(password);

            String uuid = UUID.randomUUID().toString();
            RCTCoreWalletPoolBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreWalletPoolBuilder.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreWalletPoolBuilder");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWalletPoolBuilder::setPassword : Failed to return WalletPoolBuilder from setPassword method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Set random number generator that will be used for wallet pool creation
     *@param rng, RandomNumberGenerator object
     *@return WalletPoolBuilder object, with wallet pool random number generator set
     */
    @ReactMethod
    public void setRandomNumberGenerator(Map<String, String> currentInstance, HashMap <String, String> rng, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            WalletPoolBuilder currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreWalletPoolBuilder instance passed to setRandomNumberGenerator method");
            }

            RCTCoreRandomNumberGenerator rctParam_rng = this.reactContext.getNativeModule(RCTCoreRandomNumberGenerator.class);
            RandomNumberGenerator javaParam_0 = (RandomNumberGenerator)rctParam_rng.getJavaObjects.get(rng.get("uid"));
            WalletPoolBuilder javaResult = currentInstanceObj.setRandomNumberGenerator(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreWalletPoolBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreWalletPoolBuilder.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreWalletPoolBuilder");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWalletPoolBuilder::setRandomNumberGenerator : Failed to return WalletPoolBuilder from setRandomNumberGenerator method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Set database that will be used for wallet pool creation, it will store all wallet pool's data (created wallets, accounts, preferences ...)
     *@param backend, DatabaseBackend object
     *@return WalletPoolBuilder object, with wallet pool database set
     */
    @ReactMethod
    public void setDatabaseBackend(Map<String, String> currentInstance, HashMap <String, String> backend, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            WalletPoolBuilder currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreWalletPoolBuilder instance passed to setDatabaseBackend method");
            }

            RCTCoreDatabaseBackend rctParam_backend = this.reactContext.getNativeModule(RCTCoreDatabaseBackend.class);
            DatabaseBackend javaParam_0 = (DatabaseBackend)rctParam_backend.getJavaObjects.get(backend.get("uid"));
            WalletPoolBuilder javaResult = currentInstanceObj.setDatabaseBackend(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreWalletPoolBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreWalletPoolBuilder.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreWalletPoolBuilder");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWalletPoolBuilder::setDatabaseBackend : Failed to return WalletPoolBuilder from setDatabaseBackend method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Set configuration that will be used for wallet pool creation
     *@param configuration, DynamicObject object
     *@return WalletPoolBuilder object, with wallet pool configuration set
     */
    @ReactMethod
    public void setConfiguration(Map<String, String> currentInstance, HashMap <String, String> configuration, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            WalletPoolBuilder currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreWalletPoolBuilder instance passed to setConfiguration method");
            }

            RCTCoreDynamicObject rctParam_configuration = this.reactContext.getNativeModule(RCTCoreDynamicObject.class);
            DynamicObject javaParam_0 = (DynamicObject)rctParam_configuration.getJavaObjects.get(configuration.get("uid"));
            WalletPoolBuilder javaResult = currentInstanceObj.setConfiguration(javaParam_0);

            String uuid = UUID.randomUUID().toString();
            RCTCoreWalletPoolBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreWalletPoolBuilder.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreWalletPoolBuilder");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWalletPoolBuilder::setConfiguration : Failed to return WalletPoolBuilder from setConfiguration method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Create wallet pool
     *@param callback, Callback object returning a WalletPool instance
     */
    @ReactMethod
    public void build(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            WalletPoolBuilder currentInstanceObj = this.javaObjects.get("uid");
            if (!currentInstanceObj)
            {
                throw new Exception("Wrong RCTCoreWalletPoolBuilder instance passed to build method");
            }

            RCTCoreWalletPoolCallback javaParam_0 = RCTCoreWalletPoolCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.build(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    /**
     *Create an instance of the wallet pool builder
     *@return WalletPoolBuilder object
     */
    @ReactMethod
    public void createInstance(Map<String, String> currentInstance, Promise promise) {
        try
        {
            WalletPoolBuilder javaResult = WalletPoolBuilder.createInstance();

            String uuid = UUID.randomUUID().toString();
            RCTCoreWalletPoolBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreWalletPoolBuilder.class);
            rctImpl_javaResult.getJavaObjects.put(uuid, javaResult);
            Map<String, String> result = new HashMap<String, String>();
            result.put("type","RCTCoreWalletPoolBuilder");
            result.put("uid",uuid);

            if(result)
            {
                promise.resolve(result);
            }
            else
            {
                throw new Exception("RCTCoreWalletPoolBuilder::createInstance : Failed to return WalletPoolBuilder from createInstance method");
            }
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
