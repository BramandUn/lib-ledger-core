// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from websocket_client.djinni

package com.ledger.reactnative;

import RCTCoreWebSocketConnection;
import WebSocketClientImpl;
import co.ledger.core.WebSocketConnection;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import java.util.UUID;;

public class RCTCoreWebSocketClient extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, WebSocketClientImpl> javaObjects;

    public RNLedgerCoreModule(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, WebSocketClientImpl>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreWebSocketClient";
    }

    @ReactMethod
    public void connect(Map<String, String> currentInstance, String url, HashMap <String, String> connection, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            WebSocketClientImpl currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWebSocketClient instance passed to connect method");
            }

            RCTCoreWebSocketConnection rctParam_connection = (RCTCoreWebSocketConnection)self.bridge.moduleForName("RCTCoreWebSocketConnection");
            WebSocketConnection javaParam_1 = (WebSocketConnection)rctParam_connection.javaObjects.get(connection.get("uid"));
            currentInstanceObj.connect(url, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void send(Map<String, String> currentInstance, HashMap <String, String> connection, String data, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            WebSocketClientImpl currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWebSocketClient instance passed to send method");
            }

            RCTCoreWebSocketConnection rctParam_connection = (RCTCoreWebSocketConnection)self.bridge.moduleForName("RCTCoreWebSocketConnection");
            WebSocketConnection javaParam_0 = (WebSocketConnection)rctParam_connection.javaObjects.get(connection.get("uid"));
            currentInstanceObj.send(javaParam_0, data);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
    @ReactMethod
    public void disconnect(Map<String, String> currentInstance, HashMap <String, String> connection, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");
            String sType = currentInstance.get("type");

            WebSocketClientImpl currentInstanceObj = self.javaObjects.get("uid");
            if (!javaObj)
            {
                throw new Exception("Wrong RCTCoreWebSocketClient instance passed to disconnect method");
            }

            RCTCoreWebSocketConnection rctParam_connection = (RCTCoreWebSocketConnection)self.bridge.moduleForName("RCTCoreWebSocketConnection");
            WebSocketConnection javaParam_0 = (WebSocketConnection)rctParam_connection.javaObjects.get(connection.get("uid"));
            currentInstanceObj.disconnect(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(ERROR, e);
        }
    }
}
