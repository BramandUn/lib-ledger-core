// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from websocket_client.djinni

package com.ledger.reactnative;

import co.ledger.core.ErrorCode;
import co.ledger.core.WebSocketConnection;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

public class RCTCoreWebSocketConnection extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, WebSocketConnection> javaObjects;
    public Map<String, WebSocketConnection> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreWebSocketConnection(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, WebSocketConnection>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreWebSocketConnection";
    }

    @ReactMethod
    public void onConnect(Map<String, String> currentInstance, int connectionId, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            WebSocketConnection currentInstanceObj = this.javaObjects.get(sUid);

            currentInstanceObj.onConnect(connectionId);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void onClose(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            WebSocketConnection currentInstanceObj = this.javaObjects.get(sUid);

            currentInstanceObj.onClose();
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void onMessage(Map<String, String> currentInstance, String data, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            WebSocketConnection currentInstanceObj = this.javaObjects.get(sUid);

            currentInstanceObj.onMessage(data);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void onError(Map<String, String> currentInstance, ErrorCode code, String message, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            WebSocketConnection currentInstanceObj = this.javaObjects.get(sUid);

            currentInstanceObj.onError(code, message);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void getConnectionId(Map<String, String> currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.get("uid");

            WebSocketConnection currentInstanceObj = this.javaObjects.get(sUid);

            int javaResult = currentInstanceObj.getConnectionId();
            Map<String, Integer> result = new HashMap<String, Integer>();
            result.put("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
}
